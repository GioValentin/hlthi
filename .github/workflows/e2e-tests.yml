name: E2E Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]
    paths:
      - 'apps/ehr/**'
      - 'apps/intake/**'
      - 'packages/ehr/**'
      - 'packages/utils/**'
      - 'packages/ui-components/**'
      - '.github/**'
      - '.prettierignore'
      - 'package.json'

jobs:
  e2e-tests:
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        app: [ehr, intake]
      fail-fast: false
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Check out secrets repo
        uses: actions/checkout@v4
        with:
          repository: masslight/ottehr-secrets
          ssh-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}
          path: 'secrets'

      - name: Setup environment
        run: |
          setup_env() {
            local app=$1
            mkdir -p "packages/$app/zambdas/.env"
            cp secrets/zambdas/* "packages/$app/zambdas/.env"
            mkdir -p "apps/$app/env"
            cp "secrets/$app/app/tests."*.json "apps/$app/env/"
            cp "secrets/$app/app/.env.local" "apps/$app/env/"
            if [ "$app" = "intake" ] && [ -f "secrets/$app/app/user.json" ]; then
                mkdir -p "apps/$app/playwright"
                cp "secrets/$app/app/user.json" "apps/$app/playwright/user.json"
            fi
          }

          for app in ehr intake; do
            setup_env "$app"
          done

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run ${{ matrix.app }}:e2e:local
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}/playwright-report/
            apps/${{ matrix.app }}/test-results/
          retention-days: 30

      - name: Save user.json files to secrets repo
        if: matrix.app == 'intake' && always()
        env:
          DEPLOY_OTTEHR_KEY: ${{ secrets.DEPLOY_OTTEHR_KEY }}
        run: |
          node -e '
          const fs = require("fs");
          const path = "apps/intake/playwright/user.json";

          try {
            console.log("Starting user.json processing...");
            
            if (!fs.existsSync(path)) {
              console.log(`File ${path} does not exist, exiting`);
              process.exit(0);
            }
            
            console.log("Reading user.json file...");
            const data = JSON.parse(fs.readFileSync(path, "utf8"));
            console.log("Successfully parsed user.json");
            
            const authOrigin = data.origins?.find(o => o.origin === "https://auth.ottehr.com");
            console.log("Auth origin found:", !!authOrigin);
            
            const hasAuth0Token = authOrigin?.localStorage &&
              Object.keys(authOrigin.localStorage).some(key => key.includes("auth0"));
            console.log("Has Auth0 token:", hasAuth0Token);
            
            if (!hasAuth0Token) {
              console.log("No Auth0 token found, exiting");
              process.exit(0);
            }

            console.log("Setting up SSH...");
            require("child_process").execSync(`
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
              echo "${process.env.DEPLOY_OTTEHR_KEY}" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              ssh-keyscan github.com >> ~/.ssh/known_hosts
            `, {stdio: "inherit"});

            console.log("Pushing to secrets repo...");
            require("child_process").execSync(`
              cd secrets
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git remote set-url origin git@github.com:masslight/ottehr-secrets.git
              cp ../apps/intake/playwright/user.json intake/app/user.json
              git add .
              git diff --quiet && git diff --staged --quiet || (git commit -m "Update user.json files from CI" && git push)
            `, {stdio: "inherit"});
            
            console.log("Push completed successfully");

          } catch (error) {
            console.error("Error occurred:", error);
            console.error("Error stack:", error.stack);
            process.exit(1);
          } finally {
            console.log("Cleaning up...");
            try {
              require("child_process").execSync("rm -f ~/.ssh/id_rsa", {stdio: "inherit"});
              console.log("Cleanup completed");
            } catch (e) {
              console.error("Error cleaning up SSH key:", e);
            }
          }
          '
