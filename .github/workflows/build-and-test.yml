name: Build and Test
on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - 'apps/ehr/**'
      - 'apps/intake/**'
      - 'packages/ehr/**'
      - 'packages/intake/**'
      - 'packages/utils/**'
      - 'packages/ui-components/**'
      - 'scripts/**'
      - '.github/**'
      - '.prettierignore'
      - 'package.json'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'apps/ehr/**'
      - 'apps/intake/**'
      - 'packages/ehr/**'
      - 'packages/intake/**'
      - 'packages/utils/**'
      - 'packages/ui-components/**'
      - 'scripts/**'
      - '.github/**'
      - '.prettierignore'
      - 'package.json'

jobs:
  test:
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 15

    steps:
      # Step 1: Install SSH client for accessing private repositories
      - name: Install SSH Client
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}

      # Step 2: Checkout the main repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Set up Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 4: Checkout the secrets repository
      - name: Check out secrets repo
        uses: actions/checkout@v4
        with:
          repository: masslight/ottehr-secrets
          ssh-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}
          path: 'secrets'

      # Step 5: Set up environment secrets
      - name: Setup secrets
        run: |
          mkdir -p packages/ehr/zambdas/.env packages/intake/zambdas/.env
          cp secrets/zambdas/* packages/ehr/zambdas/.env
          cp secrets/zambdas/* packages/intake/zambdas/.env
          mkdir -p apps/ehr/env apps/intake/env
          cp secrets/ehr/app/.env.local apps/ehr/env/
          cp secrets/ehr/app/tests.*.json apps/ehr/env/
          cp secrets/intake/app/.env.local apps/intake/env/
          cp secrets/intake/app/tests.*.json apps/intake/env/

      # Step 6: Cache node_modules to speed up the build process
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-node-modules-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Step 7: Install dependencies using `npm ci`
      - name: Install dependencies
        run: npm ci

      # Step 8: Run linting for the intake app
      - name: Run intake linting
        run: npm run intake:lint

      # Step 9: Run linting for the EHR app
      - name: Run EHR linting
        run: npm run ehr:lint

      # Step 10: Run unit tests
      - name: Run tests
        run: npm run test
        env:
          CI: true
          NODE_OPTIONS: '--max-old-space-size=8192'

      # Step 11: Set PR status based on the job result
      - name: Set PR status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "Build successful - setting status"
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/statuses/${{ github.sha }} \
              -f state="success" \
              -f context="CI / Tests" \
              -f description="Tests successful"
          else
            echo "Build failed - setting status"
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/statuses/${{ github.sha }} \
              -f state="failure" \
              -f context="CI / Tests" \
              -f description="Tests failed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
