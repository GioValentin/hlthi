{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "VersionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-version"
      }
    },
    "GetDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-appointments"
      }
    },
    "GetDashtelemedDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-telemed-appointments"
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-change-telemed-appointment-status"
      }
    },
    "SignDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sign-appointment"
      }
    },
    "AssignDashpractitionerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-assign-practitioner"
      }
    },
    "UnassignDashpractitionerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-unassign-practitioner"
      }
    },
    "ChangeDashinDashpersonDashvisitDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-change-in-person-visit-status"
      }
    },
    "UpdateDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-update-user"
      }
    },
    "GetDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-user"
      }
    },
    "DeactivateDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-deactivate-user"
      }
    },
    "InitDashtelemedDashsessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-init-telemed-session"
      }
    },
    "SaveDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-chart-data"
      }
    },
    "GetDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-chart-data"
      }
    },
    "DeleteDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-delete-chart-data"
      }
    },
    "SaveDashpatientDashinstructionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-patient-instruction"
      }
    },
    "GetDashpatientDashinstructionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-patient-instructions"
      }
    },
    "DeleteDashpatientDashinstructionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-delete-patient-instruction"
      }
    },
    "GetDashconversationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-conversation"
      }
    },
    "GetDashemployeesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-employees"
      }
    },
    "SyncDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sync-user"
      }
    },
    "IcdDashsearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-icd-search"
      }
    },
    "CommunicationDashsubscriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-communication-subscription"
      }
    },
    "TelemedDashappointmentDashsubscriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-appointment-subscription"
      }
    },
    "NotificationsDashupdaterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-notifications-updater"
      }
    },
    "ProcessDasherxDashresourcesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-process-erx-resources"
      }
    },
    "GetDashclaimsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-claims"
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-patient-profile-photo-url"
      }
    },
    "CreateDashuploadDashdocumentDashurlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-upload-document-url"
      }
    },
    "CreateDashupdateDashmedicationDashorderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-update-medication-order"
      }
    },
    "SaveDashfollowupDashencounterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-followup-encounter"
      }
    },
    "GetDashmedicationDashordersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-medication-orders"
      }
    },
    "CreateDashlabDashorderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-lab-order"
      }
    },
    "PaperworkDashtoDashpdfLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-paperwork-to-pdf"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "zambdas",
                  "local",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "zambdas",
              "local",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "VersionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/version.zip"
        },
        "Handler": "src/version/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-version",
        "MemorySize": 1024,
        "Timeout": 25,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VersionLogGroup"
      ]
    },
    "GetDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-appointments.zip"
        },
        "Handler": "src/get-appointments/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-appointments",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashappointmentsLogGroup"
      ]
    },
    "GetDashtelemedDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-telemed-appointments.zip"
        },
        "Handler": "src/get-telemed-appointments/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-telemed-appointments",
        "MemorySize": 1024,
        "Timeout": 250,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashtelemedDashappointmentsLogGroup"
      ]
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/change-telemed-appointment-status.zip"
        },
        "Handler": "src/change-telemed-appointment-status/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-change-telemed-appointment-status",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "CANDID_CLIENT_ID": "",
            "CANDID_CLIENT_SECRET": "",
            "CANDID_ENV": "STAGING"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ChangeDashtelemedDashappointmentDashstatusLogGroup"
      ]
    },
    "SignDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/sign-appointment.zip"
        },
        "Handler": "src/sign-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sign-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "CANDID_CLIENT_ID": "",
            "CANDID_CLIENT_SECRET": "",
            "CANDID_ENV": "STAGING"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignDashappointmentLogGroup"
      ]
    },
    "AssignDashpractitionerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/assign-practitioner.zip"
        },
        "Handler": "src/assign-practitioner/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-assign-practitioner",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AssignDashpractitionerLogGroup"
      ]
    },
    "UnassignDashpractitionerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/unassign-practitioner.zip"
        },
        "Handler": "src/unassign-practitioner/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-unassign-practitioner",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UnassignDashpractitionerLogGroup"
      ]
    },
    "ChangeDashinDashpersonDashvisitDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/change-in-person-visit-status.zip"
        },
        "Handler": "src/change-in-person-visit-status/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-change-in-person-visit-status",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ChangeDashinDashpersonDashvisitDashstatusLogGroup"
      ]
    },
    "UpdateDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/update-user.zip"
        },
        "Handler": "src/update-user/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-update-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashuserLogGroup"
      ]
    },
    "GetDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-user.zip"
        },
        "Handler": "src/get-user/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashuserLogGroup"
      ]
    },
    "DeactivateDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/deactivate-user.zip"
        },
        "Handler": "src/deactivate-user/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-deactivate-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeactivateDashuserLogGroup"
      ]
    },
    "InitDashtelemedDashsessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/init-telemed-session.zip"
        },
        "Handler": "src/init-telemed-session/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-init-telemed-session",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InitDashtelemedDashsessionLogGroup"
      ]
    },
    "SaveDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/save-chart-data.zip"
        },
        "Handler": "src/save-chart-data/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-save-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveDashchartDashdataLogGroup"
      ]
    },
    "GetDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-chart-data.zip"
        },
        "Handler": "src/get-chart-data/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashchartDashdataLogGroup"
      ]
    },
    "DeleteDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/delete-chart-data.zip"
        },
        "Handler": "src/delete-chart-data/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-delete-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteDashchartDashdataLogGroup"
      ]
    },
    "SaveDashpatientDashinstructionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/save-patient-instruction.zip"
        },
        "Handler": "src/save-patient-instruction/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-save-patient-instruction",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveDashpatientDashinstructionLogGroup"
      ]
    },
    "GetDashpatientDashinstructionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-patient-instructions.zip"
        },
        "Handler": "src/get-patient-instructions/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-patient-instructions",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpatientDashinstructionsLogGroup"
      ]
    },
    "DeleteDashpatientDashinstructionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/delete-patient-instruction.zip"
        },
        "Handler": "src/delete-patient-instruction/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-delete-patient-instruction",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteDashpatientDashinstructionLogGroup"
      ]
    },
    "GetDashconversationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-conversation.zip"
        },
        "Handler": "src/get-conversation/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-conversation",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashconversationLogGroup"
      ]
    },
    "GetDashemployeesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-employees.zip"
        },
        "Handler": "src/get-employees/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-employees",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashemployeesLogGroup"
      ]
    },
    "SyncDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/sync-user.zip"
        },
        "Handler": "src/sync-user/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sync-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SyncDashuserLogGroup"
      ]
    },
    "IcdDashsearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/icd-search.zip"
        },
        "Handler": "src/icd-search/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-icd-search",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "NLM_API_KEY": "2959b273-aef0-4708-b83c-38598a0581f3"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IcdDashsearchLogGroup"
      ]
    },
    "CommunicationDashsubscriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/communication-subscription.zip"
        },
        "Handler": "src/communication-subscription/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-communication-subscription",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CommunicationDashsubscriptionLogGroup"
      ]
    },
    "TelemedDashappointmentDashsubscriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/telemed-appointment-subscription.zip"
        },
        "Handler": "src/telemed-appointment-subscription/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-appointment-subscription",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashappointmentDashsubscriptionLogGroup"
      ]
    },
    "NotificationsDashupdaterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/notifications-updater.zip"
        },
        "Handler": "src/notifications-updater/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-notifications-updater",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NotificationsDashupdaterLogGroup"
      ]
    },
    "ProcessDasherxDashresourcesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/process-erx-resources.zip"
        },
        "Handler": "src/process-erx-resources/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-process-erx-resources",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProcessDasherxDashresourcesLogGroup"
      ]
    },
    "GetDashclaimsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-claims.zip"
        },
        "Handler": "src/get-claims/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-claims",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashclaimsLogGroup"
      ]
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-patient-profile-photo-url.zip"
        },
        "Handler": "src/get-patient-profile-photo-url/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-patient-profile-photo-url",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpatientDashprofileDashphotoDashurlLogGroup"
      ]
    },
    "CreateDashuploadDashdocumentDashurlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/create-upload-document-url.zip"
        },
        "Handler": "src/create-upload-document-url/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-create-upload-document-url",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashuploadDashdocumentDashurlLogGroup"
      ]
    },
    "CreateDashupdateDashmedicationDashorderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/create-update-medication-order.zip"
        },
        "Handler": "src/create-update-medication-order/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-create-update-medication-order",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashupdateDashmedicationDashorderLogGroup"
      ]
    },
    "SaveDashfollowupDashencounterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/save-followup-encounter.zip"
        },
        "Handler": "src/save-followup-encounter/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-save-followup-encounter",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveDashfollowupDashencounterLogGroup"
      ]
    },
    "GetDashmedicationDashordersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/get-medication-orders.zip"
        },
        "Handler": "src/get-medication-orders/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-medication-orders",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashmedicationDashordersLogGroup"
      ]
    },
    "CreateDashlabDashorderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/create-lab-order.zip"
        },
        "Handler": "src/create-lab-order/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-create-lab-order",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashlabDashorderLogGroup"
      ]
    },
    "PaperworkDashtoDashpdfLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741968663893-2025-03-14T16:11:03.893Z/paperwork-to-pdf.zip"
        },
        "Handler": "src/paperwork-to-pdf/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-paperwork-to-pdf",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaperworkDashtoDashpdfLogGroup"
      ]
    },
    "VersionLambdaVersionsLDL1yD4JGTBBZ614jRxErVpnTchxlNsivPfATgc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VersionLambdaFunction"
        },
        "CodeSha256": "2WA6WN3NAKn0te3KWQg0kLCggmjaIEh6g0/AEsfywEs="
      }
    },
    "IcdDashsearchLambdaVersionmZtqYyzVRGNpxf61UPz3vKS0SD8UgfBg5llUvcffNE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IcdDashsearchLambdaFunction"
        },
        "CodeSha256": "vZAJ4V+DGO5BN5zFb4/j/5mijpGl/i/gNcryKlFQIjQ="
      }
    },
    "InitDashtelemedDashsessionLambdaVersiongXAGhHzJAkWkyiMVAL1AxTERahxFTPdpa6hB7NKhx4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InitDashtelemedDashsessionLambdaFunction"
        },
        "CodeSha256": "ZKYS5hFAGYiu8At0cqEAyzpUG5GhDjUYe4EQnQbGhsc="
      }
    },
    "DeactivateDashuserLambdaVersionOfSvmG5ikX1PQLn3Krk84mzRiE5oK9gDGmqB1QlDA8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateDashuserLambdaFunction"
        },
        "CodeSha256": "uaaov2yoEbw9NGlljTMJ9JmmZtdLN+N6I2Jk3VF9VUY="
      }
    },
    "GetDashuserLambdaVersionCoYTRVz33mfyZN8yOKD8AcFA53LN7VGMGaXtgzXz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashuserLambdaFunction"
        },
        "CodeSha256": "RY078inM8+4JjfTXkPt8KPCKT0zT2PksENE/Zp40sMI="
      }
    },
    "UpdateDashuserLambdaVersion3h03hmME88s2bExxMmyWrzIOHQ2Zjwxzw0guvIgKtes": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashuserLambdaFunction"
        },
        "CodeSha256": "YlhCfLdffLdHeJYDBL4sjINw2JJwAQpVkcs1gDtrYY0="
      }
    },
    "CommunicationDashsubscriptionLambdaVersionT944VnHe6WbfVJihT96GVRlA61f89Je3bUXyOTrJR8Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CommunicationDashsubscriptionLambdaFunction"
        },
        "CodeSha256": "Ixqv10Bw1fwtulfAGms2PciDtmd5SYMBwcUdNgzxCBs="
      }
    },
    "SyncDashuserLambdaVersion9XpgSE0J4bYVa6HDzRjAM3t4plJ28d4IpsApWkYDk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SyncDashuserLambdaFunction"
        },
        "CodeSha256": "JKPoJwLkU7SrzhBL8L7LewxIiiD3Klih3LS4lxM+cX4="
      }
    },
    "GetDashclaimsLambdaVersionaBgu476mfnCZxuEDIabyo3UJ6O7qHwFDONq1LmiM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashclaimsLambdaFunction"
        },
        "CodeSha256": "n8KeGQTmrHXdrqpeFkarLAWczfYQ9+2ztvfzQW/x9U8="
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaVersionHNBVwXWQwcUgXMKA1vqlwTQuIZtqXR319l30jwhw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashuploadDashdocumentDashurlLambdaFunction"
        },
        "CodeSha256": "6/N+Lg6/cH/kUzQU7P3UP0KQ1i3HS56/nMuUapxQYNo="
      }
    },
    "ProcessDasherxDashresourcesLambdaVersioneRtcvePAZGYnQ1CjNnVqWCGxRg1zMn0twCTQf4hCnk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessDasherxDashresourcesLambdaFunction"
        },
        "CodeSha256": "36Jr9OIzrT+xON5bUt7SJdDZ3+rM22NenIt7LJAjE4E="
      }
    },
    "GetDashmedicationDashordersLambdaVersionZIoa3rSBIeaBPdTufSzgrU3FdTb8hxmekJJCPNRMAPY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashmedicationDashordersLambdaFunction"
        },
        "CodeSha256": "VjJNbtmFjYckaMD85IXxLJ3CVxbOZiYgVCWdfKNDYks="
      }
    },
    "GetDashtelemedDashappointmentsLambdaVersionjGjGqC1MoV9amO5OMNZ2u2IW2pOYSwfqgCMOpCZE9u4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashtelemedDashappointmentsLambdaFunction"
        },
        "CodeSha256": "Ee+QHjz9StlmkCmON2oUkB5tyHDsdqhnaFshccpZZbY="
      }
    },
    "SaveDashfollowupDashencounterLambdaVersion72KcvPDCjC65G75ZXFu8JvBvYK6gUHWj4ZFBFf6B4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashfollowupDashencounterLambdaFunction"
        },
        "CodeSha256": "F9VPv8RlyM7n6d7hdIc/tyVHhTCsRjxKlOfOCEUDFKI="
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaVersionxYrGgSux53QBbg9S9qpXbWQoo5l0TMF2MAhsLN9h4M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpatientDashprofileDashphotoDashurlLambdaFunction"
        },
        "CodeSha256": "pVAA5tH0H83MxXtZQWMwvcdg4KgwWcH7RAWNYvmZMJQ="
      }
    },
    "CreateDashlabDashorderLambdaVersionwfCkWv1dctq7dDCv5ko45Ngxp8751ybbeB5DKefWQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashlabDashorderLambdaFunction"
        },
        "CodeSha256": "WLX+3MBBQbNTBdnApOLwI2wjI5Q45xAEowQ/qmkWWhk="
      }
    },
    "GetDashappointmentsLambdaVersionPpbFSbvQDvJQBHryJyZnQMNbm7Ut6V5kWhw8lUj59Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashappointmentsLambdaFunction"
        },
        "CodeSha256": "CHKrd/u/EfYmnWLSxH49DIuGwg5TSxyCPJj8cr0/45w="
      }
    },
    "GetDashemployeesLambdaVersionKwYlEHOnGYGZ2fOuiso8mhLXRUCThtBWWrfhX9RK4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashemployeesLambdaFunction"
        },
        "CodeSha256": "tqBVvIJWzbb31n2MrNCbTCKS417A69EhVrWn63iXEhY="
      }
    },
    "GetDashconversationLambdaVersion6K95fuDk5O5csQg3hiOANQbKTr3TqZly5dIp2LV4wc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashconversationLambdaFunction"
        },
        "CodeSha256": "BNobmu019agHgAeq/K18NaR+r5TUWe3GqWgg/zS7PIc="
      }
    },
    "DeleteDashpatientDashinstructionLambdaVersionxwupgvbWhA3E9GYLPoTWdtw2hoUsCZM53d5czhUZk0g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashpatientDashinstructionLambdaFunction"
        },
        "CodeSha256": "XdmtlZK+E6GMO9siZrDcd7nRU9XNRg1cj0Tf8IuedM4="
      }
    },
    "NotificationsDashupdaterLambdaVersionaWGxbuljwykL47dRBuoLnqAv9f4GbTW9FKCd9EBuWI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationsDashupdaterLambdaFunction"
        },
        "CodeSha256": "oryOcbxWPYIdYlyn1vNOyZU0CLrcm0UWsOaH9Y9LR7g="
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaVersion3QvYZaSSJOWBJ8yfoYOukJEsGJfNfXoqZSWc6GfMo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashupdateDashmedicationDashorderLambdaFunction"
        },
        "CodeSha256": "n7O9y1rlqO72dImWv+v4KUN40LwVzhpq3veI127UNpw="
      }
    },
    "ChangeDashinDashpersonDashvisitDashstatusLambdaVersionTrb0x5TJB6OKBxaqnje2Yk6cpZkjdzd8gybu8AtDDY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangeDashinDashpersonDashvisitDashstatusLambdaFunction"
        },
        "CodeSha256": "j5B4uFTVxq2yeqRZ6Eg2my7nQP27ok/xuWxGdAVDrk8="
      }
    },
    "AssignDashpractitionerLambdaVersionjFyok5JY2T7szMQtUyAXulPocYOmjRNYHMqmW9P81Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AssignDashpractitionerLambdaFunction"
        },
        "CodeSha256": "ZTb7xgqMfmaxUG0oOxaoINJllpLEe+4/9jCLL/rN2kY="
      }
    },
    "UnassignDashpractitionerLambdaVersionlnSr3b6GXKsqRzqNleySpZjfiHUjVMfMiMhX5wFwHM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnassignDashpractitionerLambdaFunction"
        },
        "CodeSha256": "99RVCi2wBJhgVTKGDjsZWM/T5MDv5YvDsTtbuDahLQg="
      }
    },
    "GetDashchartDashdataLambdaVersionbcxvCCpRotFEjkaNGSguKVcHmlxICLiX9wWLrKQFuw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "DcDd+ute9hwNq1nyRv9u1AVOEL7a/rYDTVXiVcCzkZI="
      }
    },
    "DeleteDashchartDashdataLambdaVersionhIeAXK17dMTePffqQjL0RjAMjtxnZzjVUGa8Syaw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "sANZCu74U69yBxywVMUM6WzewXcQHLg0GKkDM4UqrGI="
      }
    },
    "GetDashpatientDashinstructionsLambdaVersion6XVCLhjqMA0KY9cvzyexUxyf4Uimt1IMEJQThTO44E0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpatientDashinstructionsLambdaFunction"
        },
        "CodeSha256": "VMHvh1DkA1L5gSpWAMUF797qAQpHKyWtfXAodE8M5GQ="
      }
    },
    "SaveDashpatientDashinstructionLambdaVersionkvnT7Cs7qUatkaNr43ODclhDmHe4LXDzP9ELK8GeKw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashpatientDashinstructionLambdaFunction"
        },
        "CodeSha256": "RUE1thr5vCGHlavxVu3SfEQ4x48wKy205XqZ6xIlpJE="
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaVersionotQcopP76kUGUy31f4NSedJ04PNX6sF4vuJP9aBUB6g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashappointmentDashsubscriptionLambdaFunction"
        },
        "CodeSha256": "g2caIv3JSiP52ojmZbDTOqIGXEGFQWEhCHo9R9aCR+w="
      }
    },
    "PaperworkDashtoDashpdfLambdaVersionqYnQKMDk5MnyfuXsfs33PWTuIpn1J2ykLnQLtiIrz84": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaperworkDashtoDashpdfLambdaFunction"
        },
        "CodeSha256": "NUiUaL4No7pOGFptOl195PxbALxOHPyuf2yEvbgy3LY="
      }
    },
    "SaveDashchartDashdataLambdaVersionqW3xQ08ZZzZ7kkBH1OAFG6Q6eTHWOE28RYWQ79nYwN4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "/KXZKp9m5+loucYzn1hUBX+RmsnZ0XLPsJ/p43pOP4A="
      }
    },
    "SignDashappointmentLambdaVersionfVqAZYtQem4l2uYw5JMM7CN8193kzBCK47T9SKvVz4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignDashappointmentLambdaFunction"
        },
        "CodeSha256": "RQ9xWZ0tbQdqev94Ac//6ZNQ2zD078WpOpSi1YWxIHI="
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaVersionsBF1csSY264BHigGWTMcbYpDAA30won7PbZJShMATU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangeDashtelemedDashappointmentDashstatusLambdaFunction"
        },
        "CodeSha256": "0/hIOqwYNx0X+CnbbrPDlwc/aaoqrY/0Ag5ouKRImQc="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "local-zambdas",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceZambda": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "zambda",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVersion": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "version",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVersionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaVersion"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-telemed-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "change-telemed-appointment-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatusExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatus"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSignDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "sign-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSignDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSignDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaAssignDashpractitioner": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "assign-practitioner",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaAssignDashpractitionerExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaAssignDashpractitioner"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUnassignDashpractitioner": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "unassign-practitioner",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUnassignDashpractitionerExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUnassignDashpractitioner"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashinDashpersonDashvisitDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "change-in-person-visit-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashinDashpersonDashvisitDashstatusExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashinDashpersonDashvisitDashstatus"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "update-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeactivateDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "deactivate-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeactivateDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeactivateDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaInitDashtelemedDashsession": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "init-telemed-session",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaInitDashtelemedDashsessionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaInitDashtelemedDashsession"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "delete-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashpatientDashinstruction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-patient-instruction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashpatientDashinstructionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashpatientDashinstruction"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashinstructions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-patient-instructions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashinstructionsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashinstructions"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashpatientDashinstruction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "delete-patient-instruction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashpatientDashinstructionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashpatientDashinstruction"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashconversation": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-conversation",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashconversationExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashconversation"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashemployees": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-employees",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashemployeesExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashemployees"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSyncDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "sync-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSyncDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSyncDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIcdDashsearch": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "icd-search",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIcdDashsearchExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaIcdDashsearch"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCommunicationDashsubscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "communication-subscription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCommunicationDashsubscriptionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCommunicationDashsubscription"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-appointment-subscription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscriptionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscription"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaNotificationsDashupdater": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "notifications-updater",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaNotificationsDashupdaterExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaNotificationsDashupdater"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaProcessDasherxDashresources": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "process-erx-resources",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaProcessDasherxDashresourcesExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaProcessDasherxDashresources"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashclaims": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-claims",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashclaimsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashclaims"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-patient-profile-photo-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurlExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurl"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-upload-document-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurlExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurl"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-update-medication-order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorderExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorder"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashfollowupDashencounter": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-followup-encounter",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashfollowupDashencounterExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashfollowupDashencounter"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashmedicationDashorders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-medication-orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashmedicationDashordersExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashmedicationDashorders"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashlabDashorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-lab-order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashlabDashorderExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashlabDashorder"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaperworkDashtoDashpdf": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "paperwork-to-pdf",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaperworkDashtoDashpdfExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPaperworkDashtoDashpdf"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodZambdaVersionExecuteGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaVersionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VersionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VersionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashappointmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashappointmentsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashtelemedDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashtelemedDashappointmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashtelemedDashappointmentsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaChangeDashtelemedDashappointmentDashstatusExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatusExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ChangeDashtelemedDashappointmentDashstatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ChangeDashtelemedDashappointmentDashstatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSignDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSignDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaAssignDashpractitionerExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaAssignDashpractitionerExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AssignDashpractitionerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AssignDashpractitionerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaUnassignDashpractitionerExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUnassignDashpractitionerExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UnassignDashpractitionerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UnassignDashpractitionerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaChangeDashinDashpersonDashvisitDashstatusExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashinDashpersonDashvisitDashstatusExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ChangeDashinDashpersonDashvisitDashstatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ChangeDashinDashpersonDashvisitDashstatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaUpdateDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateDashuserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateDashuserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashuserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashuserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaDeactivateDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeactivateDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeactivateDashuserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeactivateDashuserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaInitDashtelemedDashsessionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaInitDashtelemedDashsessionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InitDashtelemedDashsessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "InitDashtelemedDashsessionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSaveDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveDashchartDashdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveDashchartDashdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashchartDashdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashchartDashdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaDeleteDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteDashchartDashdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteDashchartDashdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSaveDashpatientDashinstructionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashpatientDashinstructionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveDashpatientDashinstructionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveDashpatientDashinstructionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpatientDashinstructionsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashinstructionsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpatientDashinstructionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpatientDashinstructionsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaDeleteDashpatientDashinstructionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashpatientDashinstructionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteDashpatientDashinstructionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteDashpatientDashinstructionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashconversationExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashconversationExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashconversationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashconversationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashemployeesExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashemployeesExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashemployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashemployeesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSyncDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSyncDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SyncDashuserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SyncDashuserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaIcdDashsearchExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaIcdDashsearchExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IcdDashsearchLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IcdDashsearchLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCommunicationDashsubscriptionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCommunicationDashsubscriptionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CommunicationDashsubscriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CommunicationDashsubscriptionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashappointmentDashsubscriptionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscriptionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashappointmentDashsubscriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashappointmentDashsubscriptionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaNotificationsDashupdaterExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaNotificationsDashupdaterExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "NotificationsDashupdaterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "NotificationsDashupdaterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaProcessDasherxDashresourcesExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaProcessDasherxDashresourcesExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ProcessDasherxDashresourcesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ProcessDasherxDashresourcesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashclaimsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashclaimsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashclaimsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashclaimsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpatientDashprofileDashphotoDashurlExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurlExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpatientDashprofileDashphotoDashurlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpatientDashprofileDashphotoDashurlLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCreateDashuploadDashdocumentDashurlExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurlExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashuploadDashdocumentDashurlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashuploadDashdocumentDashurlLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCreateDashupdateDashmedicationDashorderExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorderExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashupdateDashmedicationDashorderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashupdateDashmedicationDashorderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSaveDashfollowupDashencounterExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashfollowupDashencounterExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveDashfollowupDashencounterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveDashfollowupDashencounterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashmedicationDashordersExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashmedicationDashordersExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashmedicationDashordersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashmedicationDashordersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCreateDashlabDashorderExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashlabDashorderExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashlabDashorderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashlabDashorderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPaperworkDashtoDashpdfExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPaperworkDashtoDashpdfExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaperworkDashtoDashpdfLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaperworkDashtoDashpdfLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1741968656437": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodZambdaVersionExecuteGet",
        "ApiGatewayMethodZambdaGetDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaGetDashtelemedDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaChangeDashtelemedDashappointmentDashstatusExecutePost",
        "ApiGatewayMethodZambdaSignDashappointmentExecutePost",
        "ApiGatewayMethodZambdaAssignDashpractitionerExecutePost",
        "ApiGatewayMethodZambdaUnassignDashpractitionerExecutePost",
        "ApiGatewayMethodZambdaChangeDashinDashpersonDashvisitDashstatusExecutePost",
        "ApiGatewayMethodZambdaUpdateDashuserExecutePost",
        "ApiGatewayMethodZambdaGetDashuserExecutePost",
        "ApiGatewayMethodZambdaDeactivateDashuserExecutePost",
        "ApiGatewayMethodZambdaInitDashtelemedDashsessionExecutePost",
        "ApiGatewayMethodZambdaSaveDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaGetDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaDeleteDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaSaveDashpatientDashinstructionExecutePost",
        "ApiGatewayMethodZambdaGetDashpatientDashinstructionsExecutePost",
        "ApiGatewayMethodZambdaDeleteDashpatientDashinstructionExecutePost",
        "ApiGatewayMethodZambdaGetDashconversationExecutePost",
        "ApiGatewayMethodZambdaGetDashemployeesExecutePost",
        "ApiGatewayMethodZambdaSyncDashuserExecutePost",
        "ApiGatewayMethodZambdaIcdDashsearchExecutePost",
        "ApiGatewayMethodZambdaCommunicationDashsubscriptionExecutePost",
        "ApiGatewayMethodZambdaTelemedDashappointmentDashsubscriptionExecutePost",
        "ApiGatewayMethodZambdaNotificationsDashupdaterExecutePost",
        "ApiGatewayMethodZambdaProcessDasherxDashresourcesExecutePost",
        "ApiGatewayMethodZambdaGetDashclaimsExecutePost",
        "ApiGatewayMethodZambdaGetDashpatientDashprofileDashphotoDashurlExecutePost",
        "ApiGatewayMethodZambdaCreateDashuploadDashdocumentDashurlExecutePost",
        "ApiGatewayMethodZambdaCreateDashupdateDashmedicationDashorderExecutePost",
        "ApiGatewayMethodZambdaSaveDashfollowupDashencounterExecutePost",
        "ApiGatewayMethodZambdaGetDashmedicationDashordersExecutePost",
        "ApiGatewayMethodZambdaCreateDashlabDashorderExecutePost",
        "ApiGatewayMethodZambdaPaperworkDashtoDashpdfExecuteDashpublicPost"
      ]
    },
    "VersionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VersionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashappointmentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashtelemedDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashtelemedDashappointmentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ChangeDashtelemedDashappointmentDashstatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AssignDashpractitionerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AssignDashpractitionerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UnassignDashpractitionerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UnassignDashpractitionerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ChangeDashinDashpersonDashvisitDashstatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ChangeDashinDashpersonDashvisitDashstatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeactivateDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeactivateDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InitDashtelemedDashsessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InitDashtelemedDashsessionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveDashchartDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashchartDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashchartDashdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashpatientDashinstructionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveDashpatientDashinstructionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpatientDashinstructionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpatientDashinstructionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashpatientDashinstructionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashpatientDashinstructionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashconversationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashconversationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashemployeesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashemployeesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SyncDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SyncDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IcdDashsearchLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IcdDashsearchLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CommunicationDashsubscriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CommunicationDashsubscriptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashappointmentDashsubscriptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "NotificationsDashupdaterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationsDashupdaterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ProcessDasherxDashresourcesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ProcessDasherxDashresourcesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashclaimsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashclaimsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpatientDashprofileDashphotoDashurlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashuploadDashdocumentDashurlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashupdateDashmedicationDashorderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashfollowupDashencounterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveDashfollowupDashencounterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashmedicationDashordersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashmedicationDashordersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashlabDashorderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashlabDashorderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaperworkDashtoDashpdfLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaperworkDashtoDashpdfLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-zambdas-local-ServerlessDeploymentBucketName"
      }
    },
    "VersionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VersionLambdaVersionsLDL1yD4JGTBBZ614jRxErVpnTchxlNsivPfATgc"
      },
      "Export": {
        "Name": "sls-zambdas-local-VersionLambdaFunctionQualifiedArn"
      }
    },
    "IcdDashsearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IcdDashsearchLambdaVersionmZtqYyzVRGNpxf61UPz3vKS0SD8UgfBg5llUvcffNE"
      },
      "Export": {
        "Name": "sls-zambdas-local-IcdDashsearchLambdaFunctionQualifiedArn"
      }
    },
    "InitDashtelemedDashsessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InitDashtelemedDashsessionLambdaVersiongXAGhHzJAkWkyiMVAL1AxTERahxFTPdpa6hB7NKhx4"
      },
      "Export": {
        "Name": "sls-zambdas-local-InitDashtelemedDashsessionLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateDashuserLambdaVersionOfSvmG5ikX1PQLn3Krk84mzRiE5oK9gDGmqB1QlDA8"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeactivateDashuserLambdaFunctionQualifiedArn"
      }
    },
    "GetDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashuserLambdaVersionCoYTRVz33mfyZN8yOKD8AcFA53LN7VGMGaXtgzXz0"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashuserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashuserLambdaVersion3h03hmME88s2bExxMmyWrzIOHQ2Zjwxzw0guvIgKtes"
      },
      "Export": {
        "Name": "sls-zambdas-local-UpdateDashuserLambdaFunctionQualifiedArn"
      }
    },
    "CommunicationDashsubscriptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CommunicationDashsubscriptionLambdaVersionT944VnHe6WbfVJihT96GVRlA61f89Je3bUXyOTrJR8Y"
      },
      "Export": {
        "Name": "sls-zambdas-local-CommunicationDashsubscriptionLambdaFunctionQualifiedArn"
      }
    },
    "SyncDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SyncDashuserLambdaVersion9XpgSE0J4bYVa6HDzRjAM3t4plJ28d4IpsApWkYDk"
      },
      "Export": {
        "Name": "sls-zambdas-local-SyncDashuserLambdaFunctionQualifiedArn"
      }
    },
    "GetDashclaimsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashclaimsLambdaVersionaBgu476mfnCZxuEDIabyo3UJ6O7qHwFDONq1LmiM"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashclaimsLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashuploadDashdocumentDashurlLambdaVersionHNBVwXWQwcUgXMKA1vqlwTQuIZtqXR319l30jwhw"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashuploadDashdocumentDashurlLambdaFunctionQualifiedArn"
      }
    },
    "ProcessDasherxDashresourcesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessDasherxDashresourcesLambdaVersioneRtcvePAZGYnQ1CjNnVqWCGxRg1zMn0twCTQf4hCnk"
      },
      "Export": {
        "Name": "sls-zambdas-local-ProcessDasherxDashresourcesLambdaFunctionQualifiedArn"
      }
    },
    "GetDashmedicationDashordersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashmedicationDashordersLambdaVersionZIoa3rSBIeaBPdTufSzgrU3FdTb8hxmekJJCPNRMAPY"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashmedicationDashordersLambdaFunctionQualifiedArn"
      }
    },
    "GetDashtelemedDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashtelemedDashappointmentsLambdaVersionjGjGqC1MoV9amO5OMNZ2u2IW2pOYSwfqgCMOpCZE9u4"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashtelemedDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashfollowupDashencounterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashfollowupDashencounterLambdaVersion72KcvPDCjC65G75ZXFu8JvBvYK6gUHWj4ZFBFf6B4"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashfollowupDashencounterLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpatientDashprofileDashphotoDashurlLambdaVersionxYrGgSux53QBbg9S9qpXbWQoo5l0TMF2MAhsLN9h4M"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpatientDashprofileDashphotoDashurlLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashlabDashorderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashlabDashorderLambdaVersionwfCkWv1dctq7dDCv5ko45Ngxp8751ybbeB5DKefWQ"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashlabDashorderLambdaFunctionQualifiedArn"
      }
    },
    "GetDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashappointmentsLambdaVersionPpbFSbvQDvJQBHryJyZnQMNbm7Ut6V5kWhw8lUj59Q"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashemployeesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashemployeesLambdaVersionKwYlEHOnGYGZ2fOuiso8mhLXRUCThtBWWrfhX9RK4"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashemployeesLambdaFunctionQualifiedArn"
      }
    },
    "GetDashconversationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashconversationLambdaVersion6K95fuDk5O5csQg3hiOANQbKTr3TqZly5dIp2LV4wc"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashconversationLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashpatientDashinstructionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashpatientDashinstructionLambdaVersionxwupgvbWhA3E9GYLPoTWdtw2hoUsCZM53d5czhUZk0g"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeleteDashpatientDashinstructionLambdaFunctionQualifiedArn"
      }
    },
    "NotificationsDashupdaterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationsDashupdaterLambdaVersionaWGxbuljwykL47dRBuoLnqAv9f4GbTW9FKCd9EBuWI"
      },
      "Export": {
        "Name": "sls-zambdas-local-NotificationsDashupdaterLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashupdateDashmedicationDashorderLambdaVersion3QvYZaSSJOWBJ8yfoYOukJEsGJfNfXoqZSWc6GfMo"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashupdateDashmedicationDashorderLambdaFunctionQualifiedArn"
      }
    },
    "ChangeDashinDashpersonDashvisitDashstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangeDashinDashpersonDashvisitDashstatusLambdaVersionTrb0x5TJB6OKBxaqnje2Yk6cpZkjdzd8gybu8AtDDY"
      },
      "Export": {
        "Name": "sls-zambdas-local-ChangeDashinDashpersonDashvisitDashstatusLambdaFunctionQualifiedArn"
      }
    },
    "AssignDashpractitionerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AssignDashpractitionerLambdaVersionjFyok5JY2T7szMQtUyAXulPocYOmjRNYHMqmW9P81Y"
      },
      "Export": {
        "Name": "sls-zambdas-local-AssignDashpractitionerLambdaFunctionQualifiedArn"
      }
    },
    "UnassignDashpractitionerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnassignDashpractitionerLambdaVersionlnSr3b6GXKsqRzqNleySpZjfiHUjVMfMiMhX5wFwHM"
      },
      "Export": {
        "Name": "sls-zambdas-local-UnassignDashpractitionerLambdaFunctionQualifiedArn"
      }
    },
    "GetDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashchartDashdataLambdaVersionbcxvCCpRotFEjkaNGSguKVcHmlxICLiX9wWLrKQFuw"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashchartDashdataLambdaVersionhIeAXK17dMTePffqQjL0RjAMjtxnZzjVUGa8Syaw"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeleteDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpatientDashinstructionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpatientDashinstructionsLambdaVersion6XVCLhjqMA0KY9cvzyexUxyf4Uimt1IMEJQThTO44E0"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpatientDashinstructionsLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashpatientDashinstructionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashpatientDashinstructionLambdaVersionkvnT7Cs7qUatkaNr43ODclhDmHe4LXDzP9ELK8GeKw"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashpatientDashinstructionLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashappointmentDashsubscriptionLambdaVersionotQcopP76kUGUy31f4NSedJ04PNX6sF4vuJP9aBUB6g"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashappointmentDashsubscriptionLambdaFunctionQualifiedArn"
      }
    },
    "PaperworkDashtoDashpdfLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaperworkDashtoDashpdfLambdaVersionqYnQKMDk5MnyfuXsfs33PWTuIpn1J2ykLnQLtiIrz84"
      },
      "Export": {
        "Name": "sls-zambdas-local-PaperworkDashtoDashpdfLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashchartDashdataLambdaVersionqW3xQ08ZZzZ7kkBH1OAFG6Q6eTHWOE28RYWQ79nYwN4"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "SignDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignDashappointmentLambdaVersionfVqAZYtQem4l2uYw5JMM7CN8193kzBCK47T9SKvVz4"
      },
      "Export": {
        "Name": "sls-zambdas-local-SignDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangeDashtelemedDashappointmentDashstatusLambdaVersionsBF1csSY264BHigGWTMcbYpDAA30won7PbZJShMATU"
      },
      "Export": {
        "Name": "sls-zambdas-local-ChangeDashtelemedDashappointmentDashstatusLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-zambdas-local-ServiceEndpoint"
      }
    }
  }
}