{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "VersionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-version"
      }
    },
    "GetDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-appointments"
      }
    },
    "GetDashtelemedDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-telemed-appointments"
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-change-telemed-appointment-status"
      }
    },
    "SignDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sign-appointment"
      }
    },
    "AssignDashpractitionerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-assign-practitioner"
      }
    },
    "UnassignDashpractitionerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-unassign-practitioner"
      }
    },
    "UpdateDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-update-user"
      }
    },
    "GetDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-user"
      }
    },
    "DeactivateDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-deactivate-user"
      }
    },
    "InitDashtelemedDashsessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-init-telemed-session"
      }
    },
    "SaveDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-chart-data"
      }
    },
    "GetDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-chart-data"
      }
    },
    "DeleteDashchartDashdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-delete-chart-data"
      }
    },
    "SaveDashpatientDashinstructionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-patient-instruction"
      }
    },
    "GetDashpatientDashinstructionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-patient-instructions"
      }
    },
    "DeleteDashpatientDashinstructionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-delete-patient-instruction"
      }
    },
    "GetDashconversationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-conversation"
      }
    },
    "GetDashemployeesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-employees"
      }
    },
    "SyncDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sync-user"
      }
    },
    "IcdDashsearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-icd-search"
      }
    },
    "CommunicationDashsubscriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-communication-subscription"
      }
    },
    "TelemedDashappointmentDashsubscriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-appointment-subscription"
      }
    },
    "NotificationsDashupdaterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-notifications-updater"
      }
    },
    "ProcessDasherxDashresourcesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-process-erx-resources"
      }
    },
    "GetDashclaimsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-claims"
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-patient-profile-photo-url"
      }
    },
    "CreateDashuploadDashdocumentDashurlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-upload-document-url"
      }
    },
    "CreateDashupdateDashmedicationDashorderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-update-medication-order"
      }
    },
    "SaveDashfollowupDashencounterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-save-followup-encounter"
      }
    },
    "GetDashmedicationDashordersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-medication-orders"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": ["-", ["zambdas", "local", "lambda"]]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogStream", "logs:CreateLogGroup", "logs:TagResource"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["logs:PutLogEvents"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "zambdas",
              "local",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "VersionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/version.zip"
        },
        "Handler": "src/version/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-version",
        "MemorySize": 1024,
        "Timeout": 25,
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["VersionLogGroup"]
    },
    "GetDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-appointments.zip"
        },
        "Handler": "src/get-appointments/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-appointments",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashappointmentsLogGroup"]
    },
    "GetDashtelemedDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-telemed-appointments.zip"
        },
        "Handler": "src/get-telemed-appointments/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-telemed-appointments",
        "MemorySize": 1024,
        "Timeout": 250,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashtelemedDashappointmentsLogGroup"]
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/change-telemed-appointment-status.zip"
        },
        "Handler": "src/change-telemed-appointment-status/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-change-telemed-appointment-status",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["ChangeDashtelemedDashappointmentDashstatusLogGroup"]
    },
    "SignDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/sign-appointment.zip"
        },
        "Handler": "src/sign-appointment/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-sign-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["SignDashappointmentLogGroup"]
    },
    "AssignDashpractitionerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/assign-practitioner.zip"
        },
        "Handler": "src/assign-practitioner/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-assign-practitioner",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["AssignDashpractitionerLogGroup"]
    },
    "UnassignDashpractitionerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/unassign-practitioner.zip"
        },
        "Handler": "src/unassign-practitioner/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-unassign-practitioner",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["UnassignDashpractitionerLogGroup"]
    },
    "UpdateDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/update-user.zip"
        },
        "Handler": "src/update-user/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-update-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["UpdateDashuserLogGroup"]
    },
    "GetDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-user.zip"
        },
        "Handler": "src/get-user/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashuserLogGroup"]
    },
    "DeactivateDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/deactivate-user.zip"
        },
        "Handler": "src/deactivate-user/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-deactivate-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["DeactivateDashuserLogGroup"]
    },
    "InitDashtelemedDashsessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/init-telemed-session.zip"
        },
        "Handler": "src/init-telemed-session/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-init-telemed-session",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["InitDashtelemedDashsessionLogGroup"]
    },
    "SaveDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/save-chart-data.zip"
        },
        "Handler": "src/save-chart-data/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-save-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["SaveDashchartDashdataLogGroup"]
    },
    "GetDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-chart-data.zip"
        },
        "Handler": "src/get-chart-data/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashchartDashdataLogGroup"]
    },
    "DeleteDashchartDashdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/delete-chart-data.zip"
        },
        "Handler": "src/delete-chart-data/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-delete-chart-data",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["DeleteDashchartDashdataLogGroup"]
    },
    "SaveDashpatientDashinstructionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/save-patient-instruction.zip"
        },
        "Handler": "src/save-patient-instruction/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-save-patient-instruction",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["SaveDashpatientDashinstructionLogGroup"]
    },
    "GetDashpatientDashinstructionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-patient-instructions.zip"
        },
        "Handler": "src/get-patient-instructions/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-patient-instructions",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashpatientDashinstructionsLogGroup"]
    },
    "DeleteDashpatientDashinstructionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/delete-patient-instruction.zip"
        },
        "Handler": "src/delete-patient-instruction/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-delete-patient-instruction",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["DeleteDashpatientDashinstructionLogGroup"]
    },
    "GetDashconversationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-conversation.zip"
        },
        "Handler": "src/get-conversation/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-conversation",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashconversationLogGroup"]
    },
    "GetDashemployeesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-employees.zip"
        },
        "Handler": "src/get-employees/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-employees",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashemployeesLogGroup"]
    },
    "SyncDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/sync-user.zip"
        },
        "Handler": "src/sync-user/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-sync-user",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["SyncDashuserLogGroup"]
    },
    "IcdDashsearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/icd-search.zip"
        },
        "Handler": "src/icd-search/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-icd-search",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "NLM_API_KEY": "2959b273-aef0-4708-b83c-38598a0581f3"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["IcdDashsearchLogGroup"]
    },
    "CommunicationDashsubscriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/communication-subscription.zip"
        },
        "Handler": "src/communication-subscription/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-communication-subscription",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["CommunicationDashsubscriptionLogGroup"]
    },
    "TelemedDashappointmentDashsubscriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/telemed-appointment-subscription.zip"
        },
        "Handler": "src/telemed-appointment-subscription/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-telemed-appointment-subscription",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": ""
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["TelemedDashappointmentDashsubscriptionLogGroup"]
    },
    "NotificationsDashupdaterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/notifications-updater.zip"
        },
        "Handler": "src/notifications-updater/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-notifications-updater",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["NotificationsDashupdaterLogGroup"]
    },
    "ProcessDasherxDashresourcesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/process-erx-resources.zip"
        },
        "Handler": "src/process-erx-resources/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-process-erx-resources",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["ProcessDasherxDashresourcesLogGroup"]
    },
    "GetDashclaimsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-claims.zip"
        },
        "Handler": "src/get-claims/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-claims",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashclaimsLogGroup"]
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-patient-profile-photo-url.zip"
        },
        "Handler": "src/get-patient-profile-photo-url/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-patient-profile-photo-url",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashpatientDashprofileDashphotoDashurlLogGroup"]
    },
    "CreateDashuploadDashdocumentDashurlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/create-upload-document-url.zip"
        },
        "Handler": "src/create-upload-document-url/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-create-upload-document-url",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["CreateDashuploadDashdocumentDashurlLogGroup"]
    },
    "CreateDashupdateDashmedicationDashorderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/create-update-medication-order.zip"
        },
        "Handler": "src/create-update-medication-order/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-create-update-medication-order",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["CreateDashupdateDashmedicationDashorderLogGroup"]
    },
    "SaveDashfollowupDashencounterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/save-followup-encounter.zip"
        },
        "Handler": "src/save-followup-encounter/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-save-followup-encounter",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["SaveDashfollowupDashencounterLogGroup"]
    },
    "GetDashmedicationDashordersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1738092192237-2025-01-28T19:23:12.237Z/get-medication-orders.zip"
        },
        "Handler": "src/get-medication-orders/index.index",
        "Runtime": "nodejs18.x",
        "FunctionName": "zambdas-local-get-medication-orders",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
        }
      },
      "DependsOn": ["GetDashmedicationDashordersLogGroup"]
    },
    "IcdDashsearchLambdaVersionx0EhycKkYcRozn4lu1qcBzTpRQ0QHIu9Dyw8SuFQCUQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IcdDashsearchLambdaFunction"
        },
        "CodeSha256": "TSfzFFPgO6uQ4CWtP1g+r58BKG8NDA7RLc24FQXArYk="
      }
    },
    "VersionLambdaVersionWzKPncuvGmf8TURPL7Yxv0ib94RUpTPKIre1Cp1rwjw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VersionLambdaFunction"
        },
        "CodeSha256": "O1FdE/g0kpGkTosiymvIMgCdBVVU1ZSYfIedZ+0p1KM="
      }
    },
    "DeactivateDashuserLambdaVersione1X0Z29M9sZBheKxA036Jbv1VQsroOmk9BdQMKjNU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateDashuserLambdaFunction"
        },
        "CodeSha256": "cMmSBIVqHZvtDvnb02ltxW8gB2r/wrb3rNXTiV6pQ6g="
      }
    },
    "GetDashuserLambdaVersion8uepODO1fkmz7ecsimXX5Xg85iHuRDT86D0AL5rWEg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashuserLambdaFunction"
        },
        "CodeSha256": "u3StUFvQ1hsxCfsSQrllzHoDzJpvQcF9snBt53L3Kcg="
      }
    },
    "UpdateDashuserLambdaVersionzaFtZ2Jpb2DQEgtvnnGTRRsjnj128SZFIF07XQKqR4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashuserLambdaFunction"
        },
        "CodeSha256": "PZLBz/VWFuhEIMGYLjeXA1HU6mr5kAxQF1QQC7krg3k="
      }
    },
    "InitDashtelemedDashsessionLambdaVersionKpr5AM39O2ZVYfqWJDQybyEWLtutrMRDU8beVJs9U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InitDashtelemedDashsessionLambdaFunction"
        },
        "CodeSha256": "Ei0tRAh0KlFL2IZhaBqbO50mIPEkOTpdaynFIgCrXQg="
      }
    },
    "DeleteDashpatientDashinstructionLambdaVersion2ZggWqtVtU3zH2Ah4DiayeYfPcgmI9As9nGZePPHtfI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashpatientDashinstructionLambdaFunction"
        },
        "CodeSha256": "e781Ux3TOd6EjscX+AZHUZ1CgNTZywvfF77cW6FRNQ4="
      }
    },
    "GetDashconversationLambdaVersionajnMcGHPL52OVZxeKGhCBSEtXzlfG5Uh0rIm4rrN4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashconversationLambdaFunction"
        },
        "CodeSha256": "YDqOiv2DI1ld/zp+/mrFI/MfWvuhi5Z5aig8gppskaE="
      }
    },
    "SyncDashuserLambdaVersion4rmR70By2OtWbRhRx3uYLucsYNgMoT0DberLJUHBuE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SyncDashuserLambdaFunction"
        },
        "CodeSha256": "hcXdI8V5AZLkoCrFxwrjq0bYvdSGQDglOFaeZStspA8="
      }
    },
    "NotificationsDashupdaterLambdaVersionResDRHuz5iMpR6ruJxM1giRGezWGa7A4aJCstpZs9Oc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationsDashupdaterLambdaFunction"
        },
        "CodeSha256": "oymQXri/JavxUxp6Hn/czQIRicPrB8ouJLL1pyBGtcw="
      }
    },
    "ProcessDasherxDashresourcesLambdaVersionZF0J6vCCsH0BhIbo5bpb2dqtfWRlDxFZg5iq1XbI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessDasherxDashresourcesLambdaFunction"
        },
        "CodeSha256": "6DGOaY+Z4RU8XYRYTq0X6sa0esjYYPbmkubd4WYIR2I="
      }
    },
    "CommunicationDashsubscriptionLambdaVersionLj33R7SoLZ6471d2CLay1XG6gbLy43cgytuBLAmME": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CommunicationDashsubscriptionLambdaFunction"
        },
        "CodeSha256": "AsCRRij13U8FdZEd2marub0cl4IpitUUs6tCOQi7h8E="
      }
    },
    "GetDashclaimsLambdaVersionyXtFv22oixF5ya74cGrk0DMvj4gVTfxc5FbTHDvgY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashclaimsLambdaFunction"
        },
        "CodeSha256": "2wowlhS0J42Uvumd9Pt/k9TebDPUETSlCdCsKiu3+xc="
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaVersionW8gXb7hSURdrKIOvnVYSNVtz22dLOeuPgx3vrYcv7k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpatientDashprofileDashphotoDashurlLambdaFunction"
        },
        "CodeSha256": "rSXKDkksZvtExxl5rb29S2eg/ZK6mFM82ExMpoBIXJk="
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaVersion419hhjs7vfBfzM0lXZrINEfJNJn26pLjKC848WxGc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashupdateDashmedicationDashorderLambdaFunction"
        },
        "CodeSha256": "fawUx1YYIyfPoDHahI/5daVxRNfvnTK0RwI649VeFeA="
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaVersionUDVZl7PKwE0qZbKhPdo1EavphC0Q4FwzH2YYxWkY0w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashuploadDashdocumentDashurlLambdaFunction"
        },
        "CodeSha256": "pGE5pGgfDvtKNiNNlxoknV5ioTfsPBHR28Gp98/g1bE="
      }
    },
    "SaveDashfollowupDashencounterLambdaVersionITJgQjXHSBh6cBLuIXhYDHjviMGA32vHxa9rmOuWPr4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashfollowupDashencounterLambdaFunction"
        },
        "CodeSha256": "vaWRkC0w5rzg44iHdf40tMTyV47zkCe2vpxzuOnaLoU="
      }
    },
    "GetDashappointmentsLambdaVersion7hyZbmDaSfekWbKHCTEs60xwwWj5pRVjo5dsWMKsJdg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashappointmentsLambdaFunction"
        },
        "CodeSha256": "4dvZKC0d/m6fkFL75DvhEFuJQbJ7b0luxhN4m1dV3s8="
      }
    },
    "GetDashmedicationDashordersLambdaVersionXhgX4fzQJ2YHpcxmwb4ALIoEAwD0myU8D6hxhYtmoBQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashmedicationDashordersLambdaFunction"
        },
        "CodeSha256": "OqRSzGqZGtLPgaaO3HAu3obbmyZXX0K8tSc8ffcLI9c="
      }
    },
    "GetDashtelemedDashappointmentsLambdaVersionoKvW2MRWNXtmzXdYJWaMOthealVdX0IjtTJfofBo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashtelemedDashappointmentsLambdaFunction"
        },
        "CodeSha256": "hc0Lt2ZSOGWkNOjLpJTIwegGnq+5tRilKIMS4rh1DHw="
      }
    },
    "GetDashemployeesLambdaVersionJNdMeMLul1u043cq77o8AtfL2a9bFSYyKAARuwEI8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashemployeesLambdaFunction"
        },
        "CodeSha256": "Oy00sM84bfC/W8l0EERoecUPLD05XiZAq5fgbgvM1g8="
      }
    },
    "AssignDashpractitionerLambdaVersionpS6Vhyspi3Wi5OYYri7SZrHR5pPgEDiF391gMk5S4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AssignDashpractitionerLambdaFunction"
        },
        "CodeSha256": "hkor4AjQF6nGrWRyVwqTYYwFT4zuRjDI/uDMEFyhwhg="
      }
    },
    "UnassignDashpractitionerLambdaVersionq4gIEiwaer8jFgpYzVti82IZU7LeyF2diTiWdT4w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnassignDashpractitionerLambdaFunction"
        },
        "CodeSha256": "/oQFqryy9P4ds/KE1Msz1PDKEJPSjOtMXkC4dQZkypM="
      }
    },
    "GetDashchartDashdataLambdaVersion2sWAKK7T7KSDDKFcylmzA5CWy0zrS6NdGZkwlNgg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "a1wwzs8X0q1cl+fSQom9fUkZgZvPOKrvNmD3sHAV8lE="
      }
    },
    "SaveDashpatientDashinstructionLambdaVersion20ixJTnRyPSiaQim5m7kWDvK4rsZ4pINqvVwEhb0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashpatientDashinstructionLambdaFunction"
        },
        "CodeSha256": "rbPqFL0IOfZqjl6yErlAxOUz4JDzHmI4l5c7AEl2m7Q="
      }
    },
    "DeleteDashchartDashdataLambdaVersionnEWgIXNEJPq16baR3ZuA0UEFAhzx5mX5QO0f3deac": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "Tu2JbCX8w45Hv+NcWtmvf50j35qPgSpP/LVmiOqPvAA="
      }
    },
    "GetDashpatientDashinstructionsLambdaVersionzX6nzjSoRq1PWgiqGISGdvRqiDqsM4eoKJEyuIXmo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpatientDashinstructionsLambdaFunction"
        },
        "CodeSha256": "FdinjAx+ZwaCK7ciz6UtVRl1+XK3FEoYYh5FLB+ZGp0="
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaVersion8DiJtJZQmvtkrg68WEfHYK5dNT8491ts8CEjrHwAM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashappointmentDashsubscriptionLambdaFunction"
        },
        "CodeSha256": "g+8Rs+SlIF7h82MhiNkRJ7ntD9f/ok/LIQlMv9I/mgc="
      }
    },
    "SignDashappointmentLambdaVersionnbtDSZHhnY6ctyOWCakq0rBNEecXycWiVJwVFUBLGI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignDashappointmentLambdaFunction"
        },
        "CodeSha256": "oXd9t2oJuo7YEgqhE38vsUdiR8WXrdbVbs24krvELL8="
      }
    },
    "SaveDashchartDashdataLambdaVersionnQu6SWfMwaCchW17Y3oAu1YJ7wvSvHY5EdCdd61ISY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashchartDashdataLambdaFunction"
        },
        "CodeSha256": "wGFD4K5BChY+gfjoy2rGdph70fjGfQZ8zObBdDK2cm8="
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaVersion4O7RW78YEnjplp2GDfHuVyy90zUFvZYQNSnRLj1sbs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangeDashtelemedDashappointmentDashstatusLambdaFunction"
        },
        "CodeSha256": "l/H3h5XG5uYZ6oxTvUoSiW78LYXLwWUqps0/ivbAr3w="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "local-zambdas",
        "EndpointConfiguration": {
          "Types": ["EDGE"]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceZambda": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
        },
        "PathPart": "zambda",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVersion": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "version",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVersionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaVersion"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-telemed-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "change-telemed-appointment-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatusExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatus"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSignDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "sign-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSignDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSignDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaAssignDashpractitioner": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "assign-practitioner",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaAssignDashpractitionerExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaAssignDashpractitioner"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUnassignDashpractitioner": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "unassign-practitioner",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUnassignDashpractitionerExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUnassignDashpractitioner"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "update-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeactivateDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "deactivate-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeactivateDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeactivateDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaInitDashtelemedDashsession": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "init-telemed-session",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaInitDashtelemedDashsessionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaInitDashtelemedDashsession"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashchartDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "delete-chart-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashchartDashdataExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashchartDashdata"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashpatientDashinstruction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-patient-instruction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashpatientDashinstructionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashpatientDashinstruction"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashinstructions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-patient-instructions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashinstructionsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashinstructions"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashpatientDashinstruction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "delete-patient-instruction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaDeleteDashpatientDashinstructionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashpatientDashinstruction"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashconversation": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-conversation",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashconversationExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashconversation"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashemployees": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-employees",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashemployeesExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashemployees"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSyncDashuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "sync-user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSyncDashuserExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSyncDashuser"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIcdDashsearch": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "icd-search",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIcdDashsearchExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaIcdDashsearch"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCommunicationDashsubscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "communication-subscription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCommunicationDashsubscriptionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCommunicationDashsubscription"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-appointment-subscription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscriptionExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscription"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaNotificationsDashupdater": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "notifications-updater",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaNotificationsDashupdaterExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaNotificationsDashupdater"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaProcessDasherxDashresources": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "process-erx-resources",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaProcessDasherxDashresourcesExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaProcessDasherxDashresources"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashclaims": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-claims",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashclaimsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashclaims"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-patient-profile-photo-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurlExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurl"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-upload-document-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurlExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurl"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-update-medication-order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorderExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorder"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashfollowupDashencounter": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "save-followup-encounter",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSaveDashfollowupDashencounterExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashfollowupDashencounter"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashmedicationDashorders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-medication-orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashmedicationDashordersExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashmedicationDashorders"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodZambdaVersionExecuteGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaVersionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["VersionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["VersionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashappointmentsLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashappointmentsLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashtelemedDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashtelemedDashappointmentsLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashtelemedDashappointmentsLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaChangeDashtelemedDashappointmentDashstatusExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaChangeDashtelemedDashappointmentDashstatusExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["ChangeDashtelemedDashappointmentDashstatusLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["ChangeDashtelemedDashappointmentDashstatusLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaSignDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSignDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["SignDashappointmentLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["SignDashappointmentLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaAssignDashpractitionerExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaAssignDashpractitionerExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["AssignDashpractitionerLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["AssignDashpractitionerLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaUnassignDashpractitionerExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUnassignDashpractitionerExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["UnassignDashpractitionerLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["UnassignDashpractitionerLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaUpdateDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["UpdateDashuserLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["UpdateDashuserLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashuserLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashuserLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaDeactivateDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeactivateDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["DeactivateDashuserLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["DeactivateDashuserLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaInitDashtelemedDashsessionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaInitDashtelemedDashsessionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["InitDashtelemedDashsessionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["InitDashtelemedDashsessionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaSaveDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["SaveDashchartDashdataLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["SaveDashchartDashdataLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashchartDashdataLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashchartDashdataLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaDeleteDashchartDashdataExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashchartDashdataExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["DeleteDashchartDashdataLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["DeleteDashchartDashdataLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaSaveDashpatientDashinstructionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashpatientDashinstructionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["SaveDashpatientDashinstructionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["SaveDashpatientDashinstructionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashpatientDashinstructionsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashinstructionsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashpatientDashinstructionsLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashpatientDashinstructionsLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaDeleteDashpatientDashinstructionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaDeleteDashpatientDashinstructionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["DeleteDashpatientDashinstructionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["DeleteDashpatientDashinstructionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashconversationExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashconversationExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashconversationLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashconversationLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashemployeesExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashemployeesExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashemployeesLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashemployeesLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaSyncDashuserExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSyncDashuserExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["SyncDashuserLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["SyncDashuserLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaIcdDashsearchExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaIcdDashsearchExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["IcdDashsearchLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["IcdDashsearchLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaCommunicationDashsubscriptionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCommunicationDashsubscriptionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["CommunicationDashsubscriptionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["CommunicationDashsubscriptionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaTelemedDashappointmentDashsubscriptionExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashappointmentDashsubscriptionExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["TelemedDashappointmentDashsubscriptionLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["TelemedDashappointmentDashsubscriptionLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaNotificationsDashupdaterExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaNotificationsDashupdaterExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["NotificationsDashupdaterLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["NotificationsDashupdaterLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaProcessDasherxDashresourcesExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaProcessDasherxDashresourcesExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["ProcessDasherxDashresourcesLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["ProcessDasherxDashresourcesLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashclaimsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashclaimsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashclaimsLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashclaimsLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashpatientDashprofileDashphotoDashurlExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientDashprofileDashphotoDashurlExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashpatientDashprofileDashphotoDashurlLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashpatientDashprofileDashphotoDashurlLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaCreateDashuploadDashdocumentDashurlExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashuploadDashdocumentDashurlExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["CreateDashuploadDashdocumentDashurlLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["CreateDashuploadDashdocumentDashurlLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaCreateDashupdateDashmedicationDashorderExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashupdateDashmedicationDashorderExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["CreateDashupdateDashmedicationDashorderLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["CreateDashupdateDashmedicationDashorderLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaSaveDashfollowupDashencounterExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSaveDashfollowupDashencounterExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["SaveDashfollowupDashencounterLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["SaveDashfollowupDashencounterLambdaPermissionApiGateway"]
    },
    "ApiGatewayMethodZambdaGetDashmedicationDashordersExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashmedicationDashordersExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetDashmedicationDashordersLambdaFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": ["GetDashmedicationDashordersLambdaPermissionApiGateway"]
    },
    "ApiGatewayDeployment1738092189215": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodZambdaVersionExecuteGet",
        "ApiGatewayMethodZambdaGetDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaGetDashtelemedDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaChangeDashtelemedDashappointmentDashstatusExecutePost",
        "ApiGatewayMethodZambdaSignDashappointmentExecutePost",
        "ApiGatewayMethodZambdaAssignDashpractitionerExecutePost",
        "ApiGatewayMethodZambdaUnassignDashpractitionerExecutePost",
        "ApiGatewayMethodZambdaUpdateDashuserExecutePost",
        "ApiGatewayMethodZambdaGetDashuserExecutePost",
        "ApiGatewayMethodZambdaDeactivateDashuserExecutePost",
        "ApiGatewayMethodZambdaInitDashtelemedDashsessionExecutePost",
        "ApiGatewayMethodZambdaSaveDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaGetDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaDeleteDashchartDashdataExecutePost",
        "ApiGatewayMethodZambdaSaveDashpatientDashinstructionExecutePost",
        "ApiGatewayMethodZambdaGetDashpatientDashinstructionsExecutePost",
        "ApiGatewayMethodZambdaDeleteDashpatientDashinstructionExecutePost",
        "ApiGatewayMethodZambdaGetDashconversationExecutePost",
        "ApiGatewayMethodZambdaGetDashemployeesExecutePost",
        "ApiGatewayMethodZambdaSyncDashuserExecutePost",
        "ApiGatewayMethodZambdaIcdDashsearchExecutePost",
        "ApiGatewayMethodZambdaCommunicationDashsubscriptionExecutePost",
        "ApiGatewayMethodZambdaTelemedDashappointmentDashsubscriptionExecutePost",
        "ApiGatewayMethodZambdaNotificationsDashupdaterExecutePost",
        "ApiGatewayMethodZambdaProcessDasherxDashresourcesExecutePost",
        "ApiGatewayMethodZambdaGetDashclaimsExecutePost",
        "ApiGatewayMethodZambdaGetDashpatientDashprofileDashphotoDashurlExecutePost",
        "ApiGatewayMethodZambdaCreateDashuploadDashdocumentDashurlExecutePost",
        "ApiGatewayMethodZambdaCreateDashupdateDashmedicationDashorderExecutePost",
        "ApiGatewayMethodZambdaSaveDashfollowupDashencounterExecutePost",
        "ApiGatewayMethodZambdaGetDashmedicationDashordersExecutePost"
      ]
    },
    "VersionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["VersionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashappointmentsLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashtelemedDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashtelemedDashappointmentsLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["ChangeDashtelemedDashappointmentDashstatusLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["SignDashappointmentLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AssignDashpractitionerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["AssignDashpractitionerLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UnassignDashpractitionerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["UnassignDashpractitionerLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["UpdateDashuserLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashuserLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeactivateDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["DeactivateDashuserLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InitDashtelemedDashsessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["InitDashtelemedDashsessionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["SaveDashchartDashdataLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashchartDashdataLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashchartDashdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["DeleteDashchartDashdataLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashpatientDashinstructionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["SaveDashpatientDashinstructionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpatientDashinstructionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashpatientDashinstructionsLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashpatientDashinstructionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["DeleteDashpatientDashinstructionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashconversationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashconversationLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashemployeesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashemployeesLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SyncDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["SyncDashuserLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IcdDashsearchLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["IcdDashsearchLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CommunicationDashsubscriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["CommunicationDashsubscriptionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["TelemedDashappointmentDashsubscriptionLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "NotificationsDashupdaterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["NotificationsDashupdaterLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ProcessDasherxDashresourcesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["ProcessDasherxDashresourcesLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashclaimsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashclaimsLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashpatientDashprofileDashphotoDashurlLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["CreateDashuploadDashdocumentDashurlLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["CreateDashupdateDashmedicationDashorderLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveDashfollowupDashencounterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["SaveDashfollowupDashencounterLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashmedicationDashordersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["GetDashmedicationDashordersLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-zambdas-local-ServerlessDeploymentBucketName"
      }
    },
    "IcdDashsearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IcdDashsearchLambdaVersionx0EhycKkYcRozn4lu1qcBzTpRQ0QHIu9Dyw8SuFQCUQ"
      },
      "Export": {
        "Name": "sls-zambdas-local-IcdDashsearchLambdaFunctionQualifiedArn"
      }
    },
    "VersionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VersionLambdaVersionWzKPncuvGmf8TURPL7Yxv0ib94RUpTPKIre1Cp1rwjw"
      },
      "Export": {
        "Name": "sls-zambdas-local-VersionLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateDashuserLambdaVersione1X0Z29M9sZBheKxA036Jbv1VQsroOmk9BdQMKjNU"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeactivateDashuserLambdaFunctionQualifiedArn"
      }
    },
    "GetDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashuserLambdaVersion8uepODO1fkmz7ecsimXX5Xg85iHuRDT86D0AL5rWEg"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashuserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashuserLambdaVersionzaFtZ2Jpb2DQEgtvnnGTRRsjnj128SZFIF07XQKqR4"
      },
      "Export": {
        "Name": "sls-zambdas-local-UpdateDashuserLambdaFunctionQualifiedArn"
      }
    },
    "InitDashtelemedDashsessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InitDashtelemedDashsessionLambdaVersionKpr5AM39O2ZVYfqWJDQybyEWLtutrMRDU8beVJs9U"
      },
      "Export": {
        "Name": "sls-zambdas-local-InitDashtelemedDashsessionLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashpatientDashinstructionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashpatientDashinstructionLambdaVersion2ZggWqtVtU3zH2Ah4DiayeYfPcgmI9As9nGZePPHtfI"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeleteDashpatientDashinstructionLambdaFunctionQualifiedArn"
      }
    },
    "GetDashconversationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashconversationLambdaVersionajnMcGHPL52OVZxeKGhCBSEtXzlfG5Uh0rIm4rrN4"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashconversationLambdaFunctionQualifiedArn"
      }
    },
    "SyncDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SyncDashuserLambdaVersion4rmR70By2OtWbRhRx3uYLucsYNgMoT0DberLJUHBuE"
      },
      "Export": {
        "Name": "sls-zambdas-local-SyncDashuserLambdaFunctionQualifiedArn"
      }
    },
    "NotificationsDashupdaterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationsDashupdaterLambdaVersionResDRHuz5iMpR6ruJxM1giRGezWGa7A4aJCstpZs9Oc"
      },
      "Export": {
        "Name": "sls-zambdas-local-NotificationsDashupdaterLambdaFunctionQualifiedArn"
      }
    },
    "ProcessDasherxDashresourcesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessDasherxDashresourcesLambdaVersionZF0J6vCCsH0BhIbo5bpb2dqtfWRlDxFZg5iq1XbI"
      },
      "Export": {
        "Name": "sls-zambdas-local-ProcessDasherxDashresourcesLambdaFunctionQualifiedArn"
      }
    },
    "CommunicationDashsubscriptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CommunicationDashsubscriptionLambdaVersionLj33R7SoLZ6471d2CLay1XG6gbLy43cgytuBLAmME"
      },
      "Export": {
        "Name": "sls-zambdas-local-CommunicationDashsubscriptionLambdaFunctionQualifiedArn"
      }
    },
    "GetDashclaimsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashclaimsLambdaVersionyXtFv22oixF5ya74cGrk0DMvj4gVTfxc5FbTHDvgY"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashclaimsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpatientDashprofileDashphotoDashurlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpatientDashprofileDashphotoDashurlLambdaVersionW8gXb7hSURdrKIOvnVYSNVtz22dLOeuPgx3vrYcv7k"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpatientDashprofileDashphotoDashurlLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashupdateDashmedicationDashorderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashupdateDashmedicationDashorderLambdaVersion419hhjs7vfBfzM0lXZrINEfJNJn26pLjKC848WxGc"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashupdateDashmedicationDashorderLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashuploadDashdocumentDashurlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashuploadDashdocumentDashurlLambdaVersionUDVZl7PKwE0qZbKhPdo1EavphC0Q4FwzH2YYxWkY0w"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashuploadDashdocumentDashurlLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashfollowupDashencounterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashfollowupDashencounterLambdaVersionITJgQjXHSBh6cBLuIXhYDHjviMGA32vHxa9rmOuWPr4"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashfollowupDashencounterLambdaFunctionQualifiedArn"
      }
    },
    "GetDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashappointmentsLambdaVersion7hyZbmDaSfekWbKHCTEs60xwwWj5pRVjo5dsWMKsJdg"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashmedicationDashordersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashmedicationDashordersLambdaVersionXhgX4fzQJ2YHpcxmwb4ALIoEAwD0myU8D6hxhYtmoBQ"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashmedicationDashordersLambdaFunctionQualifiedArn"
      }
    },
    "GetDashtelemedDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashtelemedDashappointmentsLambdaVersionoKvW2MRWNXtmzXdYJWaMOthealVdX0IjtTJfofBo"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashtelemedDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashemployeesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashemployeesLambdaVersionJNdMeMLul1u043cq77o8AtfL2a9bFSYyKAARuwEI8"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashemployeesLambdaFunctionQualifiedArn"
      }
    },
    "AssignDashpractitionerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AssignDashpractitionerLambdaVersionpS6Vhyspi3Wi5OYYri7SZrHR5pPgEDiF391gMk5S4"
      },
      "Export": {
        "Name": "sls-zambdas-local-AssignDashpractitionerLambdaFunctionQualifiedArn"
      }
    },
    "UnassignDashpractitionerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnassignDashpractitionerLambdaVersionq4gIEiwaer8jFgpYzVti82IZU7LeyF2diTiWdT4w"
      },
      "Export": {
        "Name": "sls-zambdas-local-UnassignDashpractitionerLambdaFunctionQualifiedArn"
      }
    },
    "GetDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashchartDashdataLambdaVersion2sWAKK7T7KSDDKFcylmzA5CWy0zrS6NdGZkwlNgg"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashpatientDashinstructionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashpatientDashinstructionLambdaVersion20ixJTnRyPSiaQim5m7kWDvK4rsZ4pINqvVwEhb0"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashpatientDashinstructionLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashchartDashdataLambdaVersionnEWgIXNEJPq16baR3ZuA0UEFAhzx5mX5QO0f3deac"
      },
      "Export": {
        "Name": "sls-zambdas-local-DeleteDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpatientDashinstructionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpatientDashinstructionsLambdaVersionzX6nzjSoRq1PWgiqGISGdvRqiDqsM4eoKJEyuIXmo"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpatientDashinstructionsLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashappointmentDashsubscriptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashappointmentDashsubscriptionLambdaVersion8DiJtJZQmvtkrg68WEfHYK5dNT8491ts8CEjrHwAM"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashappointmentDashsubscriptionLambdaFunctionQualifiedArn"
      }
    },
    "SignDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignDashappointmentLambdaVersionnbtDSZHhnY6ctyOWCakq0rBNEecXycWiVJwVFUBLGI"
      },
      "Export": {
        "Name": "sls-zambdas-local-SignDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashchartDashdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashchartDashdataLambdaVersionnQu6SWfMwaCchW17Y3oAu1YJ7wvSvHY5EdCdd61ISY"
      },
      "Export": {
        "Name": "sls-zambdas-local-SaveDashchartDashdataLambdaFunctionQualifiedArn"
      }
    },
    "ChangeDashtelemedDashappointmentDashstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangeDashtelemedDashappointmentDashstatusLambdaVersion4O7RW78YEnjplp2GDfHuVyy90zUFvZYQNSnRLj1sbs"
      },
      "Export": {
        "Name": "sls-zambdas-local-ChangeDashtelemedDashappointmentDashstatusLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-zambdas-local-ServiceEndpoint"
      }
    }
  }
}
