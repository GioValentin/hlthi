{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "IntakeDashversionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-intake-version"
      }
    },
    "CheckDashinLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-check-in"
      }
    },
    "CreateDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-create-appointment"
      }
    },
    "GetDashscheduleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-schedule"
      }
    },
    "UpdateDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-update-appointment"
      }
    },
    "UpdateDashpaperworkDashinDashprogressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-update-paperwork-in-progress"
      }
    },
    "PatchDashpaperworkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-patch-paperwork"
      }
    },
    "SubmitDashpaperworkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-submit-paperwork"
      }
    },
    "CancelDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-cancel-appointment"
      }
    },
    "GetDashpatientsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-patients"
      }
    },
    "IntakeDashgetDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-intake-get-appointments"
      }
    },
    "GetDashpastDashvisitsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-past-visits"
      }
    },
    "GetDashpaperworkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-paperwork"
      }
    },
    "GetDashpresignedDashfileDashurlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-presigned-file-url"
      }
    },
    "SendDashmessageDashcronLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-send-message-cron"
      }
    },
    "SubDashcancellationDashemailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-cancellation-email"
      }
    },
    "SubDashconfirmationDashmessagesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-confirmation-messages"
      }
    },
    "SubDashcheckDashinDashtextLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-check-in-text"
      }
    },
    "SubDashreadyDashtextLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-ready-text"
      }
    },
    "SubDashupdateDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-update-appointments"
      }
    },
    "GetDashappointmentDashdetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-appointment-details"
      }
    },
    "SubDashintakeDashharvestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-sub-intake-harvest"
      }
    },
    "PaymentDashmethodsDashdeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-payment-methods-delete"
      }
    },
    "PaymentDashmethodsDashlistLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-payment-methods-list"
      }
    },
    "PaymentDashmethodsDashsetupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-payment-methods-setup"
      }
    },
    "PaymentDashmethodsDashsetDashdefaultLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-payment-methods-set-default"
      }
    },
    "VideoDashchatDashinvitesDashcancelLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-video-chat-invites-cancel"
      }
    },
    "VideoDashchatDashinvitesDashcreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-video-chat-invites-create"
      }
    },
    "VideoDashchatDashinvitesDashlistLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-video-chat-invites-list"
      }
    },
    "GetDashvisitDashdetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-visit-details"
      }
    },
    "TelemedDashupdateDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-update-appointment"
      }
    },
    "TelemedDashgetDashappointmentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-get-appointments"
      }
    },
    "TelemedDashcancelDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-cancel-appointment"
      }
    },
    "TelemedDashcreateDashappointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-create-appointment"
      }
    },
    "TelemedDashgetDashpatientsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-telemed-get-patients"
      }
    },
    "GetDasheligibilityLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-eligibility"
      }
    },
    "GetDashanswerDashoptionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-answer-options"
      }
    },
    "GetDashtelemedDashstatesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-telemed-states"
      }
    },
    "ListDashbookablesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-list-bookables"
      }
    },
    "GetDashwaitDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-get-wait-status"
      }
    },
    "JoinDashcallLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zambdas-local-join-call"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "zambdas",
                  "local",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zambdas-local*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "zambdas",
              "local",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "IntakeDashversionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/intake-version.zip"
        },
        "Handler": "src/version/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-intake-version",
        "MemorySize": 1024,
        "Timeout": 25,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IntakeDashversionLogGroup"
      ]
    },
    "CheckDashinLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/check-in.zip"
        },
        "Handler": "src/check-in/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-check-in",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CheckDashinLogGroup"
      ]
    },
    "CreateDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/create-appointment.zip"
        },
        "Handler": "src/appointment/prebook-create-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-create-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-inperson|1.0.5",
            "VIRTUAL_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-virtual|1.0.5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashappointmentLogGroup"
      ]
    },
    "GetDashscheduleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-schedule.zip"
        },
        "Handler": "src/get-schedule/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-schedule",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_PREBOOK_DISPLAY_TOMORROW_SLOTS_AT_HOUR": "9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashscheduleLogGroup"
      ]
    },
    "UpdateDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/update-appointment.zip"
        },
        "Handler": "src/appointment/prebook-update-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-update-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_PREBOOK_DISPLAY_TOMORROW_SLOTS_AT_HOUR": "9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashappointmentLogGroup"
      ]
    },
    "UpdateDashpaperworkDashinDashprogressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/update-paperwork-in-progress.zip"
        },
        "Handler": "src/paperwork/update-paperwork-in-progress/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-update-paperwork-in-progress",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashpaperworkDashinDashprogressLogGroup"
      ]
    },
    "PatchDashpaperworkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/patch-paperwork.zip"
        },
        "Handler": "src/paperwork/patch-paperwork/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-patch-paperwork",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "IN_PERSON_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-inperson|1.0.5",
            "VIRTUAL_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-virtual|1.0.5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PatchDashpaperworkLogGroup"
      ]
    },
    "SubmitDashpaperworkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/submit-paperwork.zip"
        },
        "Handler": "src/paperwork/submit-paperwork/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-submit-paperwork",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "IN_PERSON_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-inperson|1.0.5",
            "VIRTUAL_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-virtual|1.0.5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubmitDashpaperworkLogGroup"
      ]
    },
    "CancelDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/cancel-appointment.zip"
        },
        "Handler": "src/appointment/prebook-cancel-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-cancel-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "IN_PERSON_SENDGRID_ERROR_EMAIL_TEMPLATE_ID": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CancelDashappointmentLogGroup"
      ]
    },
    "GetDashpatientsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-patients.zip"
        },
        "Handler": "src/get-patients/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-patients",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpatientsLogGroup"
      ]
    },
    "IntakeDashgetDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/intake-get-appointments.zip"
        },
        "Handler": "src/appointment/prebook-get-appointments/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-intake-get-appointments",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IntakeDashgetDashappointmentsLogGroup"
      ]
    },
    "GetDashpastDashvisitsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-past-visits.zip"
        },
        "Handler": "src/appointment/get-past-visits/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-past-visits",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpastDashvisitsLogGroup"
      ]
    },
    "GetDashpaperworkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-paperwork.zip"
        },
        "Handler": "src/paperwork/get-paperwork/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-paperwork",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "IN_PERSON_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-inperson|1.0.5",
            "VIRTUAL_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-virtual|1.0.5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpaperworkLogGroup"
      ]
    },
    "GetDashpresignedDashfileDashurlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-presigned-file-url.zip"
        },
        "Handler": "src/get-presigned-file-url/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-presigned-file-url",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashpresignedDashfileDashurlLogGroup"
      ]
    },
    "SendDashmessageDashcronLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/send-message-cron.zip"
        },
        "Handler": "src/send-message-cron/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-send-message-cron",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendDashmessageDashcronLogGroup"
      ]
    },
    "SubDashcancellationDashemailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-cancellation-email.zip"
        },
        "Handler": "src/subscriptions/task/sub-cancellation-email/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-cancellation-email",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashcancellationDashemailLogGroup"
      ]
    },
    "SubDashconfirmationDashmessagesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-confirmation-messages.zip"
        },
        "Handler": "src/subscriptions/task/sub-confirmation-messages/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-confirmation-messages",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashconfirmationDashmessagesLogGroup"
      ]
    },
    "SubDashcheckDashinDashtextLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-check-in-text.zip"
        },
        "Handler": "src/subscriptions/task/sub-check-in-text/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-check-in-text",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashcheckDashinDashtextLogGroup"
      ]
    },
    "SubDashreadyDashtextLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-ready-text.zip"
        },
        "Handler": "src/subscriptions/task/sub-ready-text/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-ready-text",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashreadyDashtextLogGroup"
      ]
    },
    "SubDashupdateDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-update-appointments.zip"
        },
        "Handler": "src/subscriptions/task/sub-update-appointments/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-update-appointments",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CONFIRMATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "SENDGRID_EMAIL_BCC": "support@ottehr.com",
            "PROJECT_API": "https://project-api.zapehr.com/v1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashupdateDashappointmentsLogGroup"
      ]
    },
    "GetDashappointmentDashdetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-appointment-details.zip"
        },
        "Handler": "src/get-appointment-details/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-appointment-details",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "WEBSITE_URL": "http://localhost:3002",
            "IN_PERSON_SENDGRID_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "IN_PERSON_SENDGRID_SPANISH_CANCELLATION_EMAIL_TEMPLATE_ID": "",
            "SENDGRID_API_KEY": "",
            "IN_PERSON_PREBOOK_DISPLAY_TOMORROW_SLOTS_AT_HOUR": "9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashappointmentDashdetailsLogGroup"
      ]
    },
    "SubDashintakeDashharvestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/sub-intake-harvest.zip"
        },
        "Handler": "src/subscriptions/questionnaire-response/sub-intake-harvest/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-sub-intake-harvest",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "ENVIRONMENT": "local",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "PROJECT_ID": "0ba6d7a5-a5a6-4c16-a6d9-ce91f300acb4"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubDashintakeDashharvestLogGroup"
      ]
    },
    "PaymentDashmethodsDashdeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/payment-methods-delete.zip"
        },
        "Handler": "src/payment-methods/delete/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-payment-methods-delete",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaymentDashmethodsDashdeleteLogGroup"
      ]
    },
    "PaymentDashmethodsDashlistLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/payment-methods-list.zip"
        },
        "Handler": "src/payment-methods/list/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-payment-methods-list",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaymentDashmethodsDashlistLogGroup"
      ]
    },
    "PaymentDashmethodsDashsetupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/payment-methods-setup.zip"
        },
        "Handler": "src/payment-methods/setup/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-payment-methods-setup",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaymentDashmethodsDashsetupLogGroup"
      ]
    },
    "PaymentDashmethodsDashsetDashdefaultLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/payment-methods-set-default.zip"
        },
        "Handler": "src/payment-methods/set-default/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-payment-methods-set-default",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaymentDashmethodsDashsetDashdefaultLogGroup"
      ]
    },
    "VideoDashchatDashinvitesDashcancelLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/video-chat-invites-cancel.zip"
        },
        "Handler": "src/video-chat-invites/cancel-invite/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-video-chat-invites-cancel",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashcancelLogGroup"
      ]
    },
    "VideoDashchatDashinvitesDashcreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/video-chat-invites-create.zip"
        },
        "Handler": "src/video-chat-invites/create-invite/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-video-chat-invites-create",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashcreateLogGroup"
      ]
    },
    "VideoDashchatDashinvitesDashlistLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/video-chat-invites-list.zip"
        },
        "Handler": "src/video-chat-invites/list-invites/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-video-chat-invites-list",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashlistLogGroup"
      ]
    },
    "GetDashvisitDashdetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-visit-details.zip"
        },
        "Handler": "src/appointment/get-visit-details/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-visit-details",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashvisitDashdetailsLogGroup"
      ]
    },
    "TelemedDashupdateDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/telemed-update-appointment.zip"
        },
        "Handler": "src/appointment/telemed-update-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-update-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashupdateDashappointmentLogGroup"
      ]
    },
    "TelemedDashgetDashappointmentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/telemed-get-appointments.zip"
        },
        "Handler": "src/appointment/telemed-get-appointments/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-get-appointments",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashgetDashappointmentsLogGroup"
      ]
    },
    "TelemedDashcancelDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/telemed-cancel-appointment.zip"
        },
        "Handler": "src/appointment/telemed-cancel-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-cancel-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashcancelDashappointmentLogGroup"
      ]
    },
    "TelemedDashcreateDashappointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/telemed-create-appointment.zip"
        },
        "Handler": "src/appointment/telemed-create-appointment/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-create-appointment",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "IN_PERSON_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-inperson|1.0.5",
            "VIRTUAL_PREVISIT_QUESTIONNAIRE": "https://ottehr.com/FHIR/Questionnaire/intake-paperwork-virtual|1.0.5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashcreateDashappointmentLogGroup"
      ]
    },
    "TelemedDashgetDashpatientsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/telemed-get-patients.zip"
        },
        "Handler": "src/telemed-get-patients/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-telemed-get-patients",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TelemedDashgetDashpatientsLogGroup"
      ]
    },
    "GetDasheligibilityLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-eligibility.zip"
        },
        "Handler": "src/get-eligibility/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-eligibility",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "DEFAULT_BILLING_RESOURCE": "Organization/73bdf7f5-927b-419b-bd26-083426083cf5"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDasheligibilityLogGroup"
      ]
    },
    "GetDashanswerDashoptionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-answer-options.zip"
        },
        "Handler": "src/get-answer-options/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-answer-options",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashanswerDashoptionsLogGroup"
      ]
    },
    "GetDashtelemedDashstatesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-telemed-states.zip"
        },
        "Handler": "src/get-telemed-states/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-telemed-states",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashtelemedDashstatesLogGroup"
      ]
    },
    "ListDashbookablesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/list-bookables.zip"
        },
        "Handler": "src/bookable/list-bookables/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-list-bookables",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListDashbookablesLogGroup"
      ]
    },
    "GetDashwaitDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/get-wait-status.zip"
        },
        "Handler": "src/get-wait-status/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-get-wait-status",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashwaitDashstatusLogGroup"
      ]
    },
    "JoinDashcallLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/zambdas/local/1741965127887-2025-03-14T15:12:07.887Z/join-call.zip"
        },
        "Handler": "src/join-call/index.index",
        "Runtime": "nodejs20.x",
        "FunctionName": "zambdas-local-join-call",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "WEBSITE_URL": "http://localhost:3002",
            "AUTH0_ENDPOINT": "https://auth.zapehr.com/oauth/token",
            "AUTH0_CLIENT": "ycz1UKYs85GHwrNRnqktYr3h0aKbRuAi",
            "AUTH0_SECRET": "D1quVhm5CgP8qOivXLzEfyJW1rlXCAcBpXB6WFXQxSX2dhrVQo-P1VXPXLq_MS8z",
            "AUTH0_AUDIENCE": "https://api.zapehr.com",
            "FHIR_API": "https://fhir-api.zapehr.com/r4",
            "PROJECT_API": "https://project-api.zapehr.com/v1",
            "ENVIRONMENT": "local",
            "ORGANIZATION_ID": "f4ac51bd-a46d-4e8f-9b4e-7c0b3ee91e88"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "JoinDashcallLogGroup"
      ]
    },
    "GetDashpastDashvisitsLambdaVersionmqarTAOod6xYscgPlKm5mZS9aeEnjBrOOAbJFyJrU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpastDashvisitsLambdaFunction"
        },
        "CodeSha256": "NsiOW4esB3ycZzYJpYgIrtVdSrRNSCgkdGrEjOaa35Y="
      }
    },
    "PaymentDashmethodsDashlistLambdaVersionM4BYcuxEjEiaXe6wNR3ADU0KM27OtoT354lylE370": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaymentDashmethodsDashlistLambdaFunction"
        },
        "CodeSha256": "1x0bbsNozqN9xo1b0Ztg/Y0uR07wNknHOE8vAvCrrkk="
      }
    },
    "PaymentDashmethodsDashdeleteLambdaVersion0CU2243Fqg2wZNgz6ieUzr1u3kMEa18iSkJzJwINU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaymentDashmethodsDashdeleteLambdaFunction"
        },
        "CodeSha256": "j45ZdrxmSEacVe9kZEulEFnchq89zQiXsNShd/NLZE8="
      }
    },
    "PaymentDashmethodsDashsetDashdefaultLambdaVersionW3Fu12JLY061nOeE6J8leTCIkYxTdUA1BUeRLr2Ibi8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaymentDashmethodsDashsetDashdefaultLambdaFunction"
        },
        "CodeSha256": "G9LWclmt+dGCdijBLhlzV7BLYiege3O0fZqpcUz3MpQ="
      }
    },
    "PaymentDashmethodsDashsetupLambdaVersionOn5imJ7HTRhnzyxxP2DUOozjiHimmFMTqCyjo1MgA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaymentDashmethodsDashsetupLambdaFunction"
        },
        "CodeSha256": "difPTVNlAGNmLsKjId7a0RLM6Q3IrDLmPSMNJTnX1hI="
      }
    },
    "GetDashvisitDashdetailsLambdaVersion98DgwXGm0kIZ5A2Xppf9B9yjwf3qzDwrUpFlrpvfpA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashvisitDashdetailsLambdaFunction"
        },
        "CodeSha256": "Q9FZ7CRVeue26PyGHF5yiuteigatk6eevHuNi3dxMOk="
      }
    },
    "TelemedDashgetDashappointmentsLambdaVersionSNMLVumxvlLFtUXxfeB6vWZbFkhQYUiQDtYsvC7N8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashgetDashappointmentsLambdaFunction"
        },
        "CodeSha256": "0Szc1ctsOOXVX4gKgQNj92e7Bdou6MNgKKIdds6F3Ac="
      }
    },
    "TelemedDashgetDashpatientsLambdaVersionwP95pnpfVApFUzy7k7UWN0IAFqORcm1mXkCx4LKno": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashgetDashpatientsLambdaFunction"
        },
        "CodeSha256": "udTXteE32eZtmQnc3/DmkTh7JvBwpzoWKLBPQHb8GK4="
      }
    },
    "GetDashanswerDashoptionsLambdaVersion3Oe1Iue8oYgEkd989mf0c5E81iDMulViEKWdR2hSLBk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashanswerDashoptionsLambdaFunction"
        },
        "CodeSha256": "jKBtomiOp1XUP+alXpn9NwPBvYqUz1p2qTzkQzWhVCs="
      }
    },
    "ListDashbookablesLambdaVersionun9QiWddfzghmss93x9pfxE2A1nSeWNnBaBuVC14Fc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListDashbookablesLambdaFunction"
        },
        "CodeSha256": "6DJYFDndh0CzWyaMNAJqmTgyJ9i8/idrG/r3X/OSSa4="
      }
    },
    "GetDashtelemedDashstatesLambdaVersion7P9n6bcXhZircpSzObfKJHffQZjoW18XQfVyP1KhgM0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashtelemedDashstatesLambdaFunction"
        },
        "CodeSha256": "WdDgpmYi8hMbq2QjHDEhMxKaRkt0z4qHrpo4/W6j8SQ="
      }
    },
    "VideoDashchatDashinvitesDashcancelLambdaVersion1IAmcg47leiKnars6iD2dELZ6rUhG4PEXntsPjTEyVE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VideoDashchatDashinvitesDashcancelLambdaFunction"
        },
        "CodeSha256": "WAjfT89QDOg8kCG4zJwrhebBh/j7kuQMXjAfh2cmTz8="
      }
    },
    "VideoDashchatDashinvitesDashcreateLambdaVersion6aF5hxFuCtKHP76wmQxDiNepmz55wnBdlDURcTBZk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VideoDashchatDashinvitesDashcreateLambdaFunction"
        },
        "CodeSha256": "kPikG8CEALHx+YdE0cQJ5T2zhtz+FhPkjMRviKRVMXM="
      }
    },
    "VideoDashchatDashinvitesDashlistLambdaVersionZ3gz3BjNz6aI6d813U8ynWfoE6YMleRODJ6DUeNc3wo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VideoDashchatDashinvitesDashlistLambdaFunction"
        },
        "CodeSha256": "I/hiE2qe5ctRiqbJGU4Rqb4CAPsq5tfkh3rExUD92Og="
      }
    },
    "TelemedDashupdateDashappointmentLambdaVersion5WaEpivu9RtvSjYE8cjrqzlpatQs6xyZ9eKBRfZ0I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashupdateDashappointmentLambdaFunction"
        },
        "CodeSha256": "FM41LwxgRfwFNNHJxQZ9jv9L945HDNWQHPfU1D34ibI="
      }
    },
    "GetDasheligibilityLambdaVersionuXFxpxdCCfGlVetH1P3YmOKbJtLSaF3k7oIFAD2BpHw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDasheligibilityLambdaFunction"
        },
        "CodeSha256": "JGOvNe9MjVGkHkAmiucbZoi8FgphHYTiRIXSFX9NehA="
      }
    },
    "TelemedDashcreateDashappointmentLambdaVersion4thCqlb0pOIRNxiBG1xhY8q2Hjyx76aYwgXifSPiUrA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashcreateDashappointmentLambdaFunction"
        },
        "CodeSha256": "W2zh+oQ4EMRxEDb4BGVnKxUF+M1XSy5zWQnqxztqsHI="
      }
    },
    "TelemedDashcancelDashappointmentLambdaVersionSdSXALuwjOV6YYcExSsaHmAvPSpt6exU2SgX0N6nlA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TelemedDashcancelDashappointmentLambdaFunction"
        },
        "CodeSha256": "4vKG62d8otPX/FMdLnu29ABH0/y3P8d7mV0Dl5x2h5k="
      }
    },
    "GetDashwaitDashstatusLambdaVersionV3nd7kUT8TglyE6jbTbw2xRidaUDzfxCnGOqVOFFZI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashwaitDashstatusLambdaFunction"
        },
        "CodeSha256": "Dj09yl5/C0PvJEMD65t3C2ttyvURbMeKnyzMYgsSdv0="
      }
    },
    "JoinDashcallLambdaVersionBiJnhrNnpP17ZVb06CA6kAYBia2yQ1xzIfoS2P26c1o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JoinDashcallLambdaFunction"
        },
        "CodeSha256": "dm30le6MQdRqhYtLajgUBqBoslIybQ8hILdqTqvFNCg="
      }
    },
    "UpdateDashappointmentLambdaVersionvmtZkcrEEoCtVVzedNSKWbwQtmu4iNMA1YxKu0yN0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashappointmentLambdaFunction"
        },
        "CodeSha256": "22UifAlspd1jk99sP+P2JEt1fyNIz9suK3dv/Pmy7Fg="
      }
    },
    "CancelDashappointmentLambdaVersionv8Pfmbe0664pT9s4UgvxGHhHUGU4Fu94onnlR7ThDo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CancelDashappointmentLambdaFunction"
        },
        "CodeSha256": "LPTIdo/L2bdZbOalJJTFuvPPio1PdlH76/qQ/4JWKsw="
      }
    },
    "GetDashpatientsLambdaVersionI8ZQzdLWZTIqig8pCN6PY7PCdptBsuwYAGLSBGeBU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpatientsLambdaFunction"
        },
        "CodeSha256": "7P5aS9NfEu07sVxJN10s+AaFhvrdAgQrOFgPYupapw4="
      }
    },
    "GetDashpresignedDashfileDashurlLambdaVersionNuSLMMTNrx2e1CBq5hpIa31PTIAmIBN3kfhv25Kml3s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpresignedDashfileDashurlLambdaFunction"
        },
        "CodeSha256": "r0RyJYeFaxYape8iqPGqWauC1zzazjajwqxeY+UNfv0="
      }
    },
    "IntakeDashversionLambdaVersion0LCV2HKfW2VfNKDRyJ3t7UhExc64x0zwCMazQK5940": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IntakeDashversionLambdaFunction"
        },
        "CodeSha256": "l+PdLLK/LeLO+2Xb2t5on0Y/BAr8auUv+Yvq49Nnw3I="
      }
    },
    "CheckDashinLambdaVersionYMgoiZaEigYKBIXKNer8yBu9usHkx7HBUuxl3jQ3IqQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckDashinLambdaFunction"
        },
        "CodeSha256": "SdITaFswuWcVy7VN6g8G/tteHkcGGxfMhkWULH5HDLQ="
      }
    },
    "GetDashscheduleLambdaVersionAepnNzL0heppd4c37tM2pHPyNMQX1itUstHesAiCk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashscheduleLambdaFunction"
        },
        "CodeSha256": "jTU/3HX10GhIfA/UEpr5kJOTAO+aPTdI8/ld+zQR+aE="
      }
    },
    "UpdateDashpaperworkDashinDashprogressLambdaVersionDGTik9LD8iiPLo4XgJQgOsRx1xzcjszydqlNZKuXZ8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashpaperworkDashinDashprogressLambdaFunction"
        },
        "CodeSha256": "hrOgXLZBvPMFQXSsvyJYzhIZhcfiWKJWE0GH/o0wZ4E="
      }
    },
    "IntakeDashgetDashappointmentsLambdaVersionCQx2br6EbMbW0l7x9mbIdXXD2gIQCTgaxOiRVC2Kbo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IntakeDashgetDashappointmentsLambdaFunction"
        },
        "CodeSha256": "xJLqAgs7YIF8KCzcJ6LS469PsfWe0a84jfgqYG8oqmo="
      }
    },
    "SubmitDashpaperworkLambdaVersionL1y09aUe4Qb2BmKG5TJOoSbh7GyFlDku6OfUwk18zJg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubmitDashpaperworkLambdaFunction"
        },
        "CodeSha256": "Lbm9WfVuYI7ASnei1DtFVJs/qrR88rByiblxfzYAQAg="
      }
    },
    "GetDashpaperworkLambdaVersionAfLjxWmabtaJOKGR5EaLEhMAnzwiHW1wyFPydlynk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashpaperworkLambdaFunction"
        },
        "CodeSha256": "wmJsG30TtwT8x/Z8bunEPTYcphVk0Z2fRREVZdp8PZ0="
      }
    },
    "PatchDashpaperworkLambdaVersion8aRlJ8IUpG6Q5tGsw0WPFxKrkFfC3pPbvEhxwHjdRcY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PatchDashpaperworkLambdaFunction"
        },
        "CodeSha256": "FrVfEoQb8uORG7YgRMLFLwnVySvquAZ6mZ/Vm4njJ5o="
      }
    },
    "SubDashconfirmationDashmessagesLambdaVersion8W7KWaXzcmdejg371FZxBjUlHHtv5NTCPqARlJq3E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashconfirmationDashmessagesLambdaFunction"
        },
        "CodeSha256": "+8FNYn+YFQP/IKEPchcEq1sYBVsez1KCCttAc+qvW7I="
      }
    },
    "SubDashcheckDashinDashtextLambdaVersionBjTYfaQ5d7GC2MwYXrAZo5YsvbTlOkevTCiW6OYwvm8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashcheckDashinDashtextLambdaFunction"
        },
        "CodeSha256": "TzZuVUf0u/0PzJufm3vGYXFseQ3wIu/7pnYuRQcnxP4="
      }
    },
    "SubDashupdateDashappointmentsLambdaVersion7RB9q6se8SDfiQAiWuhGSzZ43DTK3QJqK6eqMpPs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashupdateDashappointmentsLambdaFunction"
        },
        "CodeSha256": "nsqUNrNnyjQjcz/cpbuwTM3VsfPKqZD3m3i9k65JkvU="
      }
    },
    "SubDashreadyDashtextLambdaVersionSgmzc7QvdIQRFvjhsrKuIPeKCDHuImdk0hs3JynWS50": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashreadyDashtextLambdaFunction"
        },
        "CodeSha256": "wvwD3LA7IsVgcmM13tD5YrfL6SUAtYIF5H9JrsIH8sA="
      }
    },
    "GetDashappointmentDashdetailsLambdaVersionSulBIJrTNemEnSJZ37hKAM9koT04DOa5o0kY9Agc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashappointmentDashdetailsLambdaFunction"
        },
        "CodeSha256": "+syH0ngZWNzH3PeK4XwC9v9rPw3TWHs4vQHU1pdHHp8="
      }
    },
    "SubDashcancellationDashemailLambdaVersioniAUTJ2anFMvLgXUfHBY2bFG5RUf0CdfxotFVICiAHs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashcancellationDashemailLambdaFunction"
        },
        "CodeSha256": "jUVLgnUMmg+S9MV5LHB5fkEC23Ucl9ThsWceqbXR+ug="
      }
    },
    "SendDashmessageDashcronLambdaVersionlFqhF5lHAtbXT2MDHhgycyMLvyjqRF4UiBc507Pg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendDashmessageDashcronLambdaFunction"
        },
        "CodeSha256": "hck146sUTgsHGzybNiioQW8MrSZ7vy8xeY378GuKfGM="
      }
    },
    "CreateDashappointmentLambdaVersion5u8bK9U2QksbP0K8r0n3jJvK42Q4pA3GtP3PW8hI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashappointmentLambdaFunction"
        },
        "CodeSha256": "3WfsPdjC68FkQf4XLh2SWF9Rj+3jevwuI3oLRa40C8Y="
      }
    },
    "SubDashintakeDashharvestLambdaVersionoveEKO5u7vcXvPYucrpFHcOq2w22MyFZ1Oer2bVZSrM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubDashintakeDashharvestLambdaFunction"
        },
        "CodeSha256": "JkmrVYjb/2r/lO6unWBIzrDZWva7GgO8/jOpMb0uRLo="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "local-zambdas",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceZambda": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "zambda",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIntakeDashversion": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "intake-version",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIntakeDashversionExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaIntakeDashversion"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCheckDashin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "check-in",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCheckDashinExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCheckDashin"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "create-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCreateDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashschedule": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-schedule",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashscheduleExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashschedule"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "update-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashappointmentExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashappointment"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashpaperwork": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "update-paperwork",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaUpdateDashpaperworkExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashpaperwork"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPatchDashpaperwork": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "patch-paperwork",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPatchDashpaperworkExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPatchDashpaperwork"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubmitDashpaperwork": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "submit-paperwork",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubmitDashpaperworkExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubmitDashpaperwork"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCancelDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "cancel-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaCancelDashappointmentExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaCancelDashappointment"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatients": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-patients",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpatientsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatients"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIntakeDashgetDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "intake-get-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaIntakeDashgetDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaIntakeDashgetDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpastDashvisits": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-past-visits",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpastDashvisitsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpastDashvisits"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpaperwork": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-paperwork",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpaperworkExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpaperwork"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpresignedDashfileDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-presigned-file-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashpresignedDashfileDashurlExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpresignedDashfileDashurl"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSendDashmessageDashcron": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "send-message-cron",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSendDashmessageDashcronExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSendDashmessageDashcron"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "subscriptions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTask": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptions"
        },
        "PathPart": "task",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcancellationDashemail": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTask"
        },
        "PathPart": "sub-cancellation-email",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcancellationDashemailExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcancellationDashemail"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashconfirmationDashmessages": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTask"
        },
        "PathPart": "sub-confirmation-messages",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashconfirmationDashmessagesExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashconfirmationDashmessages"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcheckDashinDashtext": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTask"
        },
        "PathPart": "sub-check-in-text",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcheckDashinDashtextExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcheckDashinDashtext"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashreadyDashtext": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTask"
        },
        "PathPart": "sub-ready-text",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashreadyDashtextExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashreadyDashtext"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashupdateDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTask"
        },
        "PathPart": "sub-update-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsTaskSubDashupdateDashappointmentsExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashupdateDashappointments"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponse": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptions"
        },
        "PathPart": "questionnaire-response",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponse"
        },
        "PathPart": "sub-intake-harvest",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvestExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvest"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointmentDashdetails": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-appointment-details",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashappointmentDashdetailsExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointmentDashdetails"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashdelete": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "payment-methods-delete",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashdeleteExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashdelete"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashlist": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "payment-methods-list",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashlistExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashlist"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashsetup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "payment-methods-setup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashsetupExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashsetup"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashsetDashdefault": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "payment-methods-set-default",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaPaymentDashmethodsDashsetDashdefaultExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashsetDashdefault"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcancel": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "video-chat-invites-cancel",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcancelExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcancel"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "video-chat-invites-create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcreateExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcreate"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashlist": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "video-chat-invites-list",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashlistExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashlist"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashvisitDashdetails": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-visit-details",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashvisitDashdetailsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashvisitDashdetails"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashupdateDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-update-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashupdateDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashupdateDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashgetDashappointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-get-appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashgetDashappointmentsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashgetDashappointments"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashcancelDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-cancel-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashcancelDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashcancelDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashcreateDashappointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-create-appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashcreateDashappointmentExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashcreateDashappointment"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashgetDashpatients": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "telemed-get-patients",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaTelemedDashgetDashpatientsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashgetDashpatients"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDasheligibility": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-eligibility",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDasheligibilityExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDasheligibility"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashanswerDashoptions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-answer-options",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashanswerDashoptionsExecute": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashanswerDashoptions"
        },
        "PathPart": "execute",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashstates": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-telemed-states",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashtelemedDashstatesExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashstates"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaListDashbookables": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "list-bookables",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaListDashbookablesExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaListDashbookables"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashwaitDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "get-wait-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaGetDashwaitDashstatusExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaGetDashwaitDashstatus"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaJoinDashcall": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambda"
        },
        "PathPart": "join-call",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceZambdaJoinDashcallExecuteDashpublic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceZambdaJoinDashcall"
        },
        "PathPart": "execute-public",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodZambdaIntakeDashversionExecuteDashpublicGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaIntakeDashversionExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IntakeDashversionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IntakeDashversionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCheckDashinExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCheckDashinExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CheckDashinLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CheckDashinLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCreateDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCreateDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashscheduleExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashscheduleExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashscheduleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashscheduleLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaUpdateDashappointmentExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashappointmentExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaUpdateDashpaperworkExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaUpdateDashpaperworkExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateDashpaperworkDashinDashprogressLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateDashpaperworkDashinDashprogressLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPatchDashpaperworkExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPatchDashpaperworkExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PatchDashpaperworkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PatchDashpaperworkLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubmitDashpaperworkExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubmitDashpaperworkExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubmitDashpaperworkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubmitDashpaperworkLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaCancelDashappointmentExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaCancelDashappointmentExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CancelDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CancelDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpatientsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpatientsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpatientsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpatientsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaIntakeDashgetDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaIntakeDashgetDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IntakeDashgetDashappointmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IntakeDashgetDashappointmentsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpastDashvisitsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpastDashvisitsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpastDashvisitsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpastDashvisitsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpaperworkExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpaperworkExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpaperworkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpaperworkLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashpresignedDashfileDashurlExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashpresignedDashfileDashurlExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashpresignedDashfileDashurlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashpresignedDashfileDashurlLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSendDashmessageDashcronExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSendDashmessageDashcronExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SendDashmessageDashcronLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SendDashmessageDashcronLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsTaskSubDashcancellationDashemailExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcancellationDashemailExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashcancellationDashemailLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashcancellationDashemailLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsTaskSubDashconfirmationDashmessagesExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashconfirmationDashmessagesExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashconfirmationDashmessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashconfirmationDashmessagesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsTaskSubDashcheckDashinDashtextExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashcheckDashinDashtextExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashcheckDashinDashtextLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashcheckDashinDashtextLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsTaskSubDashreadyDashtextExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashreadyDashtextExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashreadyDashtextLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashreadyDashtextLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsTaskSubDashupdateDashappointmentsExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsTaskSubDashupdateDashappointmentsExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashupdateDashappointmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashupdateDashappointmentsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashappointmentDashdetailsExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashappointmentDashdetailsExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashappointmentDashdetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashappointmentDashdetailsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvestExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvestExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubDashintakeDashharvestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubDashintakeDashharvestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPaymentDashmethodsDashdeleteExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashdeleteExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaymentDashmethodsDashdeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaymentDashmethodsDashdeleteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPaymentDashmethodsDashlistExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashlistExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaymentDashmethodsDashlistLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaymentDashmethodsDashlistLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPaymentDashmethodsDashsetupExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashsetupExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaymentDashmethodsDashsetupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaymentDashmethodsDashsetupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaPaymentDashmethodsDashsetDashdefaultExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaPaymentDashmethodsDashsetDashdefaultExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaymentDashmethodsDashsetDashdefaultLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaymentDashmethodsDashsetDashdefaultLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashcancelExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcancelExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VideoDashchatDashinvitesDashcancelLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashcancelLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashcreateExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashcreateExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VideoDashchatDashinvitesDashcreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashcreateLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashlistExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaVideoDashchatDashinvitesDashlistExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VideoDashchatDashinvitesDashlistLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VideoDashchatDashinvitesDashlistLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashvisitDashdetailsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashvisitDashdetailsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashvisitDashdetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashvisitDashdetailsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashupdateDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashupdateDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashupdateDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashupdateDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashgetDashappointmentsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashgetDashappointmentsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashgetDashappointmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashgetDashappointmentsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashcancelDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashcancelDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashcancelDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashcancelDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashcreateDashappointmentExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashcreateDashappointmentExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashcreateDashappointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashcreateDashappointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaTelemedDashgetDashpatientsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaTelemedDashgetDashpatientsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TelemedDashgetDashpatientsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TelemedDashgetDashpatientsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDasheligibilityExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDasheligibilityExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDasheligibilityLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDasheligibilityLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashanswerDashoptionsExecutePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashanswerDashoptionsExecute"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashanswerDashoptionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashanswerDashoptionsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashtelemedDashstatesExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashtelemedDashstatesExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashtelemedDashstatesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashtelemedDashstatesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaListDashbookablesExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaListDashbookablesExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListDashbookablesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListDashbookablesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaGetDashwaitDashstatusExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaGetDashwaitDashstatusExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashwaitDashstatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashwaitDashstatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodZambdaJoinDashcallExecuteDashpublicPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceZambdaJoinDashcallExecuteDashpublic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JoinDashcallLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "JoinDashcallLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1741965112219": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodZambdaIntakeDashversionExecuteDashpublicGet",
        "ApiGatewayMethodZambdaCheckDashinExecuteDashpublicPost",
        "ApiGatewayMethodZambdaCreateDashappointmentExecutePost",
        "ApiGatewayMethodZambdaGetDashscheduleExecuteDashpublicPost",
        "ApiGatewayMethodZambdaUpdateDashappointmentExecuteDashpublicPost",
        "ApiGatewayMethodZambdaUpdateDashpaperworkExecuteDashpublicPost",
        "ApiGatewayMethodZambdaPatchDashpaperworkExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubmitDashpaperworkExecuteDashpublicPost",
        "ApiGatewayMethodZambdaCancelDashappointmentExecuteDashpublicPost",
        "ApiGatewayMethodZambdaGetDashpatientsExecutePost",
        "ApiGatewayMethodZambdaIntakeDashgetDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaGetDashpastDashvisitsExecutePost",
        "ApiGatewayMethodZambdaGetDashpaperworkExecuteDashpublicPost",
        "ApiGatewayMethodZambdaGetDashpresignedDashfileDashurlExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSendDashmessageDashcronExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsTaskSubDashcancellationDashemailExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsTaskSubDashconfirmationDashmessagesExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsTaskSubDashcheckDashinDashtextExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsTaskSubDashreadyDashtextExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsTaskSubDashupdateDashappointmentsExecuteDashpublicPost",
        "ApiGatewayMethodZambdaGetDashappointmentDashdetailsExecuteDashpublicPost",
        "ApiGatewayMethodZambdaSubscriptionsQuestionnaireDashresponseSubDashintakeDashharvestExecuteDashpublicPost",
        "ApiGatewayMethodZambdaPaymentDashmethodsDashdeleteExecutePost",
        "ApiGatewayMethodZambdaPaymentDashmethodsDashlistExecutePost",
        "ApiGatewayMethodZambdaPaymentDashmethodsDashsetupExecutePost",
        "ApiGatewayMethodZambdaPaymentDashmethodsDashsetDashdefaultExecutePost",
        "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashcancelExecutePost",
        "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashcreateExecutePost",
        "ApiGatewayMethodZambdaVideoDashchatDashinvitesDashlistExecutePost",
        "ApiGatewayMethodZambdaGetDashvisitDashdetailsExecutePost",
        "ApiGatewayMethodZambdaTelemedDashupdateDashappointmentExecutePost",
        "ApiGatewayMethodZambdaTelemedDashgetDashappointmentsExecutePost",
        "ApiGatewayMethodZambdaTelemedDashcancelDashappointmentExecutePost",
        "ApiGatewayMethodZambdaTelemedDashcreateDashappointmentExecutePost",
        "ApiGatewayMethodZambdaTelemedDashgetDashpatientsExecutePost",
        "ApiGatewayMethodZambdaGetDasheligibilityExecutePost",
        "ApiGatewayMethodZambdaGetDashanswerDashoptionsExecutePost",
        "ApiGatewayMethodZambdaGetDashtelemedDashstatesExecuteDashpublicPost",
        "ApiGatewayMethodZambdaListDashbookablesExecuteDashpublicPost",
        "ApiGatewayMethodZambdaGetDashwaitDashstatusExecuteDashpublicPost",
        "ApiGatewayMethodZambdaJoinDashcallExecuteDashpublicPost"
      ]
    },
    "IntakeDashversionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntakeDashversionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CheckDashinLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckDashinLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashscheduleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashscheduleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashpaperworkDashinDashprogressLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashpaperworkDashinDashprogressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PatchDashpaperworkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PatchDashpaperworkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubmitDashpaperworkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubmitDashpaperworkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CancelDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CancelDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpatientsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpatientsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IntakeDashgetDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IntakeDashgetDashappointmentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpastDashvisitsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpastDashvisitsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpaperworkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpaperworkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashpresignedDashfileDashurlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashpresignedDashfileDashurlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SendDashmessageDashcronLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendDashmessageDashcronLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashcancellationDashemailLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashcancellationDashemailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashconfirmationDashmessagesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashconfirmationDashmessagesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashcheckDashinDashtextLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashcheckDashinDashtextLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashreadyDashtextLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashreadyDashtextLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashupdateDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashupdateDashappointmentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashappointmentDashdetailsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashappointmentDashdetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubDashintakeDashharvestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubDashintakeDashharvestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaymentDashmethodsDashdeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaymentDashmethodsDashdeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaymentDashmethodsDashlistLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaymentDashmethodsDashlistLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaymentDashmethodsDashsetupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaymentDashmethodsDashsetupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaymentDashmethodsDashsetDashdefaultLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaymentDashmethodsDashsetDashdefaultLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VideoDashchatDashinvitesDashcancelLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VideoDashchatDashinvitesDashcancelLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VideoDashchatDashinvitesDashcreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VideoDashchatDashinvitesDashcreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VideoDashchatDashinvitesDashlistLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VideoDashchatDashinvitesDashlistLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashvisitDashdetailsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashvisitDashdetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashupdateDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashupdateDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashgetDashappointmentsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashgetDashappointmentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashcancelDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashcancelDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashcreateDashappointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashcreateDashappointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TelemedDashgetDashpatientsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TelemedDashgetDashpatientsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDasheligibilityLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDasheligibilityLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashanswerDashoptionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashanswerDashoptionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashtelemedDashstatesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashtelemedDashstatesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListDashbookablesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListDashbookablesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashwaitDashstatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashwaitDashstatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "JoinDashcallLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "JoinDashcallLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-zambdas-local-ServerlessDeploymentBucketName"
      }
    },
    "GetDashpastDashvisitsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpastDashvisitsLambdaVersionmqarTAOod6xYscgPlKm5mZS9aeEnjBrOOAbJFyJrU"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpastDashvisitsLambdaFunctionQualifiedArn"
      }
    },
    "PaymentDashmethodsDashlistLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaymentDashmethodsDashlistLambdaVersionM4BYcuxEjEiaXe6wNR3ADU0KM27OtoT354lylE370"
      },
      "Export": {
        "Name": "sls-zambdas-local-PaymentDashmethodsDashlistLambdaFunctionQualifiedArn"
      }
    },
    "PaymentDashmethodsDashdeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaymentDashmethodsDashdeleteLambdaVersion0CU2243Fqg2wZNgz6ieUzr1u3kMEa18iSkJzJwINU"
      },
      "Export": {
        "Name": "sls-zambdas-local-PaymentDashmethodsDashdeleteLambdaFunctionQualifiedArn"
      }
    },
    "PaymentDashmethodsDashsetDashdefaultLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaymentDashmethodsDashsetDashdefaultLambdaVersionW3Fu12JLY061nOeE6J8leTCIkYxTdUA1BUeRLr2Ibi8"
      },
      "Export": {
        "Name": "sls-zambdas-local-PaymentDashmethodsDashsetDashdefaultLambdaFunctionQualifiedArn"
      }
    },
    "PaymentDashmethodsDashsetupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaymentDashmethodsDashsetupLambdaVersionOn5imJ7HTRhnzyxxP2DUOozjiHimmFMTqCyjo1MgA"
      },
      "Export": {
        "Name": "sls-zambdas-local-PaymentDashmethodsDashsetupLambdaFunctionQualifiedArn"
      }
    },
    "GetDashvisitDashdetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashvisitDashdetailsLambdaVersion98DgwXGm0kIZ5A2Xppf9B9yjwf3qzDwrUpFlrpvfpA"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashvisitDashdetailsLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashgetDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashgetDashappointmentsLambdaVersionSNMLVumxvlLFtUXxfeB6vWZbFkhQYUiQDtYsvC7N8"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashgetDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashgetDashpatientsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashgetDashpatientsLambdaVersionwP95pnpfVApFUzy7k7UWN0IAFqORcm1mXkCx4LKno"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashgetDashpatientsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashanswerDashoptionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashanswerDashoptionsLambdaVersion3Oe1Iue8oYgEkd989mf0c5E81iDMulViEKWdR2hSLBk"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashanswerDashoptionsLambdaFunctionQualifiedArn"
      }
    },
    "ListDashbookablesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListDashbookablesLambdaVersionun9QiWddfzghmss93x9pfxE2A1nSeWNnBaBuVC14Fc"
      },
      "Export": {
        "Name": "sls-zambdas-local-ListDashbookablesLambdaFunctionQualifiedArn"
      }
    },
    "GetDashtelemedDashstatesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashtelemedDashstatesLambdaVersion7P9n6bcXhZircpSzObfKJHffQZjoW18XQfVyP1KhgM0"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashtelemedDashstatesLambdaFunctionQualifiedArn"
      }
    },
    "VideoDashchatDashinvitesDashcancelLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VideoDashchatDashinvitesDashcancelLambdaVersion1IAmcg47leiKnars6iD2dELZ6rUhG4PEXntsPjTEyVE"
      },
      "Export": {
        "Name": "sls-zambdas-local-VideoDashchatDashinvitesDashcancelLambdaFunctionQualifiedArn"
      }
    },
    "VideoDashchatDashinvitesDashcreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VideoDashchatDashinvitesDashcreateLambdaVersion6aF5hxFuCtKHP76wmQxDiNepmz55wnBdlDURcTBZk"
      },
      "Export": {
        "Name": "sls-zambdas-local-VideoDashchatDashinvitesDashcreateLambdaFunctionQualifiedArn"
      }
    },
    "VideoDashchatDashinvitesDashlistLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VideoDashchatDashinvitesDashlistLambdaVersionZ3gz3BjNz6aI6d813U8ynWfoE6YMleRODJ6DUeNc3wo"
      },
      "Export": {
        "Name": "sls-zambdas-local-VideoDashchatDashinvitesDashlistLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashupdateDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashupdateDashappointmentLambdaVersion5WaEpivu9RtvSjYE8cjrqzlpatQs6xyZ9eKBRfZ0I"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashupdateDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "GetDasheligibilityLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDasheligibilityLambdaVersionuXFxpxdCCfGlVetH1P3YmOKbJtLSaF3k7oIFAD2BpHw"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDasheligibilityLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashcreateDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashcreateDashappointmentLambdaVersion4thCqlb0pOIRNxiBG1xhY8q2Hjyx76aYwgXifSPiUrA"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashcreateDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "TelemedDashcancelDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TelemedDashcancelDashappointmentLambdaVersionSdSXALuwjOV6YYcExSsaHmAvPSpt6exU2SgX0N6nlA"
      },
      "Export": {
        "Name": "sls-zambdas-local-TelemedDashcancelDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "GetDashwaitDashstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashwaitDashstatusLambdaVersionV3nd7kUT8TglyE6jbTbw2xRidaUDzfxCnGOqVOFFZI"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashwaitDashstatusLambdaFunctionQualifiedArn"
      }
    },
    "JoinDashcallLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JoinDashcallLambdaVersionBiJnhrNnpP17ZVb06CA6kAYBia2yQ1xzIfoS2P26c1o"
      },
      "Export": {
        "Name": "sls-zambdas-local-JoinDashcallLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashappointmentLambdaVersionvmtZkcrEEoCtVVzedNSKWbwQtmu4iNMA1YxKu0yN0"
      },
      "Export": {
        "Name": "sls-zambdas-local-UpdateDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "CancelDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CancelDashappointmentLambdaVersionv8Pfmbe0664pT9s4UgvxGHhHUGU4Fu94onnlR7ThDo"
      },
      "Export": {
        "Name": "sls-zambdas-local-CancelDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpatientsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpatientsLambdaVersionI8ZQzdLWZTIqig8pCN6PY7PCdptBsuwYAGLSBGeBU"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpatientsLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpresignedDashfileDashurlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpresignedDashfileDashurlLambdaVersionNuSLMMTNrx2e1CBq5hpIa31PTIAmIBN3kfhv25Kml3s"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpresignedDashfileDashurlLambdaFunctionQualifiedArn"
      }
    },
    "IntakeDashversionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IntakeDashversionLambdaVersion0LCV2HKfW2VfNKDRyJ3t7UhExc64x0zwCMazQK5940"
      },
      "Export": {
        "Name": "sls-zambdas-local-IntakeDashversionLambdaFunctionQualifiedArn"
      }
    },
    "CheckDashinLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckDashinLambdaVersionYMgoiZaEigYKBIXKNer8yBu9usHkx7HBUuxl3jQ3IqQ"
      },
      "Export": {
        "Name": "sls-zambdas-local-CheckDashinLambdaFunctionQualifiedArn"
      }
    },
    "GetDashscheduleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashscheduleLambdaVersionAepnNzL0heppd4c37tM2pHPyNMQX1itUstHesAiCk"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashscheduleLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashpaperworkDashinDashprogressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashpaperworkDashinDashprogressLambdaVersionDGTik9LD8iiPLo4XgJQgOsRx1xzcjszydqlNZKuXZ8"
      },
      "Export": {
        "Name": "sls-zambdas-local-UpdateDashpaperworkDashinDashprogressLambdaFunctionQualifiedArn"
      }
    },
    "IntakeDashgetDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IntakeDashgetDashappointmentsLambdaVersionCQx2br6EbMbW0l7x9mbIdXXD2gIQCTgaxOiRVC2Kbo"
      },
      "Export": {
        "Name": "sls-zambdas-local-IntakeDashgetDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "SubmitDashpaperworkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubmitDashpaperworkLambdaVersionL1y09aUe4Qb2BmKG5TJOoSbh7GyFlDku6OfUwk18zJg"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubmitDashpaperworkLambdaFunctionQualifiedArn"
      }
    },
    "GetDashpaperworkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashpaperworkLambdaVersionAfLjxWmabtaJOKGR5EaLEhMAnzwiHW1wyFPydlynk"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashpaperworkLambdaFunctionQualifiedArn"
      }
    },
    "PatchDashpaperworkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PatchDashpaperworkLambdaVersion8aRlJ8IUpG6Q5tGsw0WPFxKrkFfC3pPbvEhxwHjdRcY"
      },
      "Export": {
        "Name": "sls-zambdas-local-PatchDashpaperworkLambdaFunctionQualifiedArn"
      }
    },
    "SubDashconfirmationDashmessagesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashconfirmationDashmessagesLambdaVersion8W7KWaXzcmdejg371FZxBjUlHHtv5NTCPqARlJq3E"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashconfirmationDashmessagesLambdaFunctionQualifiedArn"
      }
    },
    "SubDashcheckDashinDashtextLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashcheckDashinDashtextLambdaVersionBjTYfaQ5d7GC2MwYXrAZo5YsvbTlOkevTCiW6OYwvm8"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashcheckDashinDashtextLambdaFunctionQualifiedArn"
      }
    },
    "SubDashupdateDashappointmentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashupdateDashappointmentsLambdaVersion7RB9q6se8SDfiQAiWuhGSzZ43DTK3QJqK6eqMpPs"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashupdateDashappointmentsLambdaFunctionQualifiedArn"
      }
    },
    "SubDashreadyDashtextLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashreadyDashtextLambdaVersionSgmzc7QvdIQRFvjhsrKuIPeKCDHuImdk0hs3JynWS50"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashreadyDashtextLambdaFunctionQualifiedArn"
      }
    },
    "GetDashappointmentDashdetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashappointmentDashdetailsLambdaVersionSulBIJrTNemEnSJZ37hKAM9koT04DOa5o0kY9Agc"
      },
      "Export": {
        "Name": "sls-zambdas-local-GetDashappointmentDashdetailsLambdaFunctionQualifiedArn"
      }
    },
    "SubDashcancellationDashemailLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashcancellationDashemailLambdaVersioniAUTJ2anFMvLgXUfHBY2bFG5RUf0CdfxotFVICiAHs"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashcancellationDashemailLambdaFunctionQualifiedArn"
      }
    },
    "SendDashmessageDashcronLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendDashmessageDashcronLambdaVersionlFqhF5lHAtbXT2MDHhgycyMLvyjqRF4UiBc507Pg"
      },
      "Export": {
        "Name": "sls-zambdas-local-SendDashmessageDashcronLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashappointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashappointmentLambdaVersion5u8bK9U2QksbP0K8r0n3jJvK42Q4pA3GtP3PW8hI"
      },
      "Export": {
        "Name": "sls-zambdas-local-CreateDashappointmentLambdaFunctionQualifiedArn"
      }
    },
    "SubDashintakeDashharvestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubDashintakeDashharvestLambdaVersionoveEKO5u7vcXvPYucrpFHcOq2w22MyFZ1Oer2bVZSrM"
      },
      "Export": {
        "Name": "sls-zambdas-local-SubDashintakeDashharvestLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-zambdas-local-ServiceEndpoint"
      }
    }
  }
}